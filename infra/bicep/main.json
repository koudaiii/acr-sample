{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.38.5.1644",
      "templateHash": "15185629331721387221"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "japaneast",
      "metadata": {
        "description": "Azure region for resources"
      }
    },
    "suffix": {
      "type": "string",
      "defaultValue": "[dateTimeAdd(utcNow(), 'PT0H', 'yyyyMMdd-HHmmss')]",
      "metadata": {
        "description": "Suffix to append to resource names for uniqueness"
      }
    },
    "resourceGroupName": {
      "type": "string",
      "defaultValue": "acr-sample-rg",
      "metadata": {
        "description": "Resource group name"
      }
    },
    "acrName": {
      "type": "string",
      "defaultValue": "acrsamplekoudaiii",
      "minLength": 5,
      "maxLength": 50,
      "metadata": {
        "description": "Azure Container Registry name (must be globally unique)"
      }
    },
    "containerAppName": {
      "type": "string",
      "defaultValue": "acr-sample-app",
      "metadata": {
        "description": "Container app name"
      }
    },
    "containerAppEnvironmentName": {
      "type": "string",
      "defaultValue": "acr-sample-env",
      "metadata": {
        "description": "Container app environment name"
      }
    },
    "logAnalyticsWorkspaceName": {
      "type": "string",
      "defaultValue": "acr-sample-logs",
      "metadata": {
        "description": "Log Analytics workspace name"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {
        "environment": "production",
        "project": "acr-sample",
        "managed_by": "bicep"
      },
      "metadata": {
        "description": "Tags to apply to resources"
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "[format('{0}-resource-group', uniqueString(deployment().name, parameters('location')))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('{0}-{1}', parameters('resourceGroupName'), parameters('suffix'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "12239489478811281495"
            },
            "name": "Resource Groups",
            "description": "This module deploys a Resource Group.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "nullable": true
            },
            "roleAssignmentType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                    }
                  },
                  "roleDefinitionIdOrName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                    }
                  },
                  "principalId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                    }
                  },
                  "principalType": {
                    "type": "string",
                    "allowedValues": [
                      "Device",
                      "ForeignGroup",
                      "Group",
                      "ServicePrincipal",
                      "User"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The principal type of the assigned principal ID."
                    }
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The description of the role assignment."
                    }
                  },
                  "condition": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                    }
                  },
                  "conditionVersion": {
                    "type": "string",
                    "allowedValues": [
                      "2.0"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Version of the condition."
                    }
                  },
                  "delegatedManagedIdentityResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                    }
                  }
                }
              },
              "nullable": true
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Resource Group."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "Optional. Location of the Resource Group. It uses the deployment's location when not provided."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "$ref": "#/definitions/roleAssignmentType",
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the storage account resource."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.resources-resourcegroup.{0}.{1}', replace('0.4.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "location": "[parameters('location')]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "resourceGroup": {
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2021-04-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {}
            },
            "resourceGroup_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-RG-Lock', uniqueString(deployment().name, parameters('location')))]",
              "resourceGroup": "[parameters('name')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "lock": {
                    "value": "[parameters('lock')]"
                  },
                  "name": {
                    "value": "[parameters('name')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "16740360506283584978"
                    }
                  },
                  "definitions": {
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Resource Group."
                      }
                    }
                  },
                  "resources": {
                    "resourceGroup_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "resourceGroup"
              ]
            },
            "resourceGroup_roleAssignments": {
              "condition": "[not(empty(coalesce(parameters('roleAssignments'), createArray())))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-RG-RoleAssignments', uniqueString(deployment().name, parameters('location')))]",
              "resourceGroup": "[parameters('name')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "roleAssignments": {
                    "value": "[parameters('roleAssignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "10992477577200576081"
                    }
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                            }
                          },
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Quota Request Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0e5f05e5-9ab9-446b-b98d-1e2157c94125')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "Tag Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4a9ae827-6dc8-4573-8ac7-8239d42aa03f')]",
                      "Template Spec Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c9b6475-caf0-4164-b5a1-2142a7116f4b')]",
                      "Template Spec Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '392ae280-861d-42bd-9ea5-08ee6d83b80e')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "resourceGroup_roleAssignments": {
                      "copy": {
                        "name": "resourceGroup_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceGroup().id, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "resourceGroup"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the resource group."
              },
              "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('resourceGroup', '2021-04-01', 'full').location]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "[format('{0}-resources', uniqueString(deployment().name, parameters('location')))]",
      "resourceGroup": "[format('{0}-{1}', parameters('resourceGroupName'), parameters('suffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "acrName": {
            "value": "[format('{0}{1}', parameters('acrName'), parameters('suffix'))]"
          },
          "containerAppName": {
            "value": "[format('{0}-{1}', parameters('containerAppName'), parameters('suffix'))]"
          },
          "containerAppEnvironmentName": {
            "value": "[format('{0}-{1}', parameters('containerAppEnvironmentName'), parameters('suffix'))]"
          },
          "logAnalyticsWorkspaceName": {
            "value": "[format('{0}-{1}', parameters('logAnalyticsWorkspaceName'), parameters('suffix'))]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.5.1644",
              "templateHash": "8263194336304460088"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region for resources"
              }
            },
            "acrName": {
              "type": "string",
              "metadata": {
                "description": "Azure Container Registry name (must be globally unique)"
              }
            },
            "containerAppName": {
              "type": "string",
              "metadata": {
                "description": "Container app name"
              }
            },
            "containerAppEnvironmentName": {
              "type": "string",
              "metadata": {
                "description": "Container app environment name"
              }
            },
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace name"
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "Tags to apply to resources"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2025-04-01",
              "name": "[format('{0}-log-analytics', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logAnalyticsWorkspaceName": {
                    "value": "[parameters('logAnalyticsWorkspaceName')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.38.5.1644",
                      "templateHash": "9719033797095176362"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure region for resources"
                      }
                    },
                    "logAnalyticsWorkspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Log Analytics workspace name"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "Tags to apply to resources"
                      }
                    },
                    "skuName": {
                      "type": "string",
                      "defaultValue": "PerGB2018",
                      "metadata": {
                        "description": "SKU name for Log Analytics workspace"
                      }
                    },
                    "dataRetention": {
                      "type": "int",
                      "defaultValue": 30,
                      "metadata": {
                        "description": "Data retention in days"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2025-04-01",
                      "name": "[format('{0}-log-analytics', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('logAnalyticsWorkspaceName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "skuName": {
                            "value": "[parameters('skuName')]"
                          },
                          "dataRetention": {
                            "value": "[parameters('dataRetention')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.32.4.45862",
                              "templateHash": "16982022366579989921"
                            },
                            "name": "Log Analytics Workspaces",
                            "description": "This module deploys a Log Analytics Workspace.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "diagnosticSettingType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of diagnostic setting."
                                  }
                                },
                                "logCategoriesAndGroups": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "category": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                        }
                                      },
                                      "categoryGroup": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                        }
                                      },
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                  }
                                },
                                "metricCategories": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "category": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                        }
                                      },
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                  }
                                },
                                "logAnalyticsDestinationType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "AzureDiagnostics",
                                    "Dedicated"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                  }
                                },
                                "useThisWorkspace": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Instead of using an external reference, use the deployed instance as the target for its diagnostic settings. If set to `true`, the `workspaceResourceId` property is ignored."
                                  }
                                },
                                "workspaceResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "storageAccountResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "eventHubAuthorizationRuleResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                  }
                                },
                                "eventHubName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "marketplacePartnerResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                  }
                                }
                              }
                            },
                            "gallerySolutionType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of the solution.\nFor solutions authored by Microsoft, the name must be in the pattern: `SolutionType(WorkspaceName)`, for example: `AntiMalware(contoso-Logs)`.\nFor solutions authored by third parties, the name should be in the pattern: `SolutionType[WorkspaceName]`, for example `MySolution[contoso-Logs]`.\nThe solution type is case-sensitive."
                                  }
                                },
                                "plan": {
                                  "$ref": "#/definitions/solutionPlanType",
                                  "metadata": {
                                    "description": "Required. Plan for solution object supported by the OperationsManagement resource provider."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "Properties of the gallery solutions to be created in the log analytics workspace."
                              }
                            },
                            "storageInsightsConfigType": {
                              "type": "object",
                              "properties": {
                                "storageAccountResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Resource ID of the storage account to be linked."
                                  }
                                },
                                "containers": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The names of the blob containers that the workspace should read."
                                  }
                                },
                                "tables": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. List of tables to be read by the workspace."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "Properties of the storage insights configuration."
                              }
                            },
                            "linkedServiceType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of the linked service."
                                  }
                                },
                                "resourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource id of the resource that will be linked to the workspace. This should be used for linking resources which require read access."
                                  }
                                },
                                "writeAccessResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource id of the resource that will be linked to the workspace. This should be used for linking resources which require write access."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "Properties of the linked service."
                              }
                            },
                            "linkedStorageAccountType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of the link."
                                  }
                                },
                                "storageAccountIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "minLength": 1,
                                  "metadata": {
                                    "description": "Required. Linked storage accounts resources Ids."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "Properties of the linked storage account."
                              }
                            },
                            "savedSearchType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of the saved search."
                                  }
                                },
                                "etag": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The ETag of the saved search. To override an existing saved search, use \"*\" or specify the current Etag."
                                  }
                                },
                                "category": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The category of the saved search. This helps the user to find a saved search faster."
                                  }
                                },
                                "displayName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Display name for the search."
                                  }
                                },
                                "functionAlias": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The function alias if query serves as a function."
                                  }
                                },
                                "functionParameters": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The optional function parameters if query serves as a function. Value should be in the following format: 'param-name1:type1 = default_value1, param-name2:type2 = default_value2'. For more examples and proper syntax please refer to /azure/kusto/query/functions/user-defined-functions."
                                  }
                                },
                                "query": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The query expression for the saved search."
                                  }
                                },
                                "tags": {
                                  "type": "array",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The tags attached to the saved search."
                                  }
                                },
                                "version": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The version number of the query language. The current version is 2 and is the default."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "Properties of the saved search."
                              }
                            },
                            "dataExportType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of the data export."
                                  }
                                },
                                "destination": {
                                  "$ref": "#/definitions/destinationType",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The destination of the data export."
                                  }
                                },
                                "enable": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the data export."
                                  }
                                },
                                "tableNames": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. The list of table names to export."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "Properties of the data export."
                              }
                            },
                            "dataSourceType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of the data source."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The kind of data source."
                                  }
                                },
                                "linkedResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource id of the resource that will be linked to the workspace."
                                  }
                                },
                                "eventLogName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the event log to configure when kind is WindowsEvent."
                                  }
                                },
                                "eventTypes": {
                                  "type": "array",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The event types to configure when kind is WindowsEvent."
                                  }
                                },
                                "objectName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of the object to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                                  }
                                },
                                "instanceName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of the instance to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                                  }
                                },
                                "intervalSeconds": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Interval in seconds to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                                  }
                                },
                                "performanceCounters": {
                                  "type": "array",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. List of counters to configure when the kind is LinuxPerformanceObject."
                                  }
                                },
                                "counterName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Counter name to configure when kind is WindowsPerformanceCounter."
                                  }
                                },
                                "state": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. State to configure when kind is IISLogs or LinuxSyslogCollection or LinuxPerformanceCollection."
                                  }
                                },
                                "syslogName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. System log to configure when kind is LinuxSyslog."
                                  }
                                },
                                "syslogSeverities": {
                                  "type": "array",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Severities to configure when kind is LinuxSyslog."
                                  }
                                },
                                "tags": {
                                  "type": "object",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Tags to configure in the resource."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "Properties of the data source."
                              }
                            },
                            "tableType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the table."
                                  }
                                },
                                "plan": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The plan for the table."
                                  }
                                },
                                "restoredLogs": {
                                  "$ref": "#/definitions/restoredLogsType",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The restored logs for the table."
                                  }
                                },
                                "schema": {
                                  "$ref": "#/definitions/schemaType",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The schema for the table."
                                  }
                                },
                                "searchResults": {
                                  "$ref": "#/definitions/searchResultsType",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The search results for the table."
                                  }
                                },
                                "retentionInDays": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The retention in days for the table."
                                  }
                                },
                                "totalRetentionInDays": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The total retention in days for the table."
                                  }
                                },
                                "roleAssignments": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/roleAssignmentType"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The role assignments for the table."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "Properties of the custom table."
                              }
                            },
                            "_1.columnType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The column name."
                                  }
                                },
                                "type": {
                                  "type": "string",
                                  "allowedValues": [
                                    "boolean",
                                    "dateTime",
                                    "dynamic",
                                    "guid",
                                    "int",
                                    "long",
                                    "real",
                                    "string"
                                  ],
                                  "metadata": {
                                    "description": "Required. The column type."
                                  }
                                },
                                "dataTypeHint": {
                                  "type": "string",
                                  "allowedValues": [
                                    "armPath",
                                    "guid",
                                    "ip",
                                    "uri"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The column data type logical hint."
                                  }
                                },
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The column description."
                                  }
                                },
                                "displayName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Column display name."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "The parameters of the table column.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "table/main.bicep"
                                }
                              }
                            },
                            "destinationType": {
                              "type": "object",
                              "properties": {
                                "resourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The destination resource ID."
                                  }
                                },
                                "metaData": {
                                  "type": "object",
                                  "properties": {
                                    "eventHubName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Allows to define an Event Hub name. Not applicable when destination is Storage Account."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The destination metadata."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "The data export destination properties.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "data-export/main.bicep"
                                }
                              }
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a lock.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                                }
                              }
                            },
                            "managedIdentityAllType": {
                              "type": "object",
                              "properties": {
                                "systemAssigned": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enables system assigned managed identity on the resource."
                                  }
                                },
                                "userAssignedResourceIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                                }
                              }
                            },
                            "restoredLogsType": {
                              "type": "object",
                              "properties": {
                                "sourceTable": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The table to restore data from."
                                  }
                                },
                                "startRestoreTime": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The timestamp to start the restore from (UTC)."
                                  }
                                },
                                "endRestoreTime": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The timestamp to end the restore by (UTC)."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "The parameters of the restore operation that initiated the table.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "table/main.bicep"
                                }
                              }
                            },
                            "roleAssignmentType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                  }
                                },
                                "roleDefinitionIdOrName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                  }
                                },
                                "principalId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                  }
                                },
                                "principalType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Device",
                                    "ForeignGroup",
                                    "Group",
                                    "ServicePrincipal",
                                    "User"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The principal type of the assigned principal ID."
                                  }
                                },
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The description of the role assignment."
                                  }
                                },
                                "condition": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                  }
                                },
                                "conditionVersion": {
                                  "type": "string",
                                  "allowedValues": [
                                    "2.0"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Version of the condition."
                                  }
                                },
                                "delegatedManagedIdentityResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a role assignment.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                                }
                              }
                            },
                            "schemaType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The table name."
                                  }
                                },
                                "columns": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/_1.columnType"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of table custom columns."
                                  }
                                },
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The table description."
                                  }
                                },
                                "displayName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The table display name."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "The table schema.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "table/main.bicep"
                                }
                              }
                            },
                            "searchResultsType": {
                              "type": "object",
                              "properties": {
                                "query": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The search job query."
                                  }
                                },
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The search description."
                                  }
                                },
                                "limit": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Limit the search job to return up to specified number of rows."
                                  }
                                },
                                "startSearchTime": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The timestamp to start the search from (UTC)."
                                  }
                                },
                                "endSearchTime": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The timestamp to end the search by (UTC)."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "The parameters of the search job that initiated the table.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "table/main.bicep"
                                }
                              }
                            },
                            "solutionPlanType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of the solution to be created.\nFor solutions authored by Microsoft, the name must be in the pattern: `SolutionType(WorkspaceName)`, for example: `AntiMalware(contoso-Logs)`.\nFor solutions authored by third parties, it can be anything.\nThe solution type is case-sensitive.\nIf not provided, the value of the `name` parameter will be used."
                                  }
                                },
                                "product": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The product name of the deployed solution.\nFor Microsoft published gallery solution it should be `OMSGallery/{solutionType}`, for example `OMSGallery/AntiMalware`.\nFor a third party solution, it can be anything.\nThis is case sensitive."
                                  }
                                },
                                "publisher": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The publisher name of the deployed solution. For Microsoft published gallery solution, it is `Microsoft`, which is the default value."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/operations-management/solution:0.3.0"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Log Analytics workspace."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "skuName": {
                              "type": "string",
                              "defaultValue": "PerGB2018",
                              "allowedValues": [
                                "CapacityReservation",
                                "Free",
                                "LACluster",
                                "PerGB2018",
                                "PerNode",
                                "Premium",
                                "Standalone",
                                "Standard"
                              ],
                              "metadata": {
                                "description": "Optional. The name of the SKU."
                              }
                            },
                            "skuCapacityReservationLevel": {
                              "type": "int",
                              "defaultValue": 100,
                              "minValue": 100,
                              "maxValue": 5000,
                              "metadata": {
                                "description": "Optional. The capacity reservation level in GB for this workspace, when CapacityReservation sku is selected. Must be in increments of 100 between 100 and 5000."
                              }
                            },
                            "storageInsightsConfigs": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/storageInsightsConfigType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. List of storage accounts to be read by the workspace."
                              }
                            },
                            "linkedServices": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/linkedServiceType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. List of services to be linked."
                              }
                            },
                            "linkedStorageAccounts": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/linkedStorageAccountType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Conditional. List of Storage Accounts to be linked. Required if 'forceCmkForQuery' is set to 'true' and 'savedSearches' is not empty."
                              }
                            },
                            "savedSearches": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/savedSearchType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Kusto Query Language searches to save."
                              }
                            },
                            "dataExports": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/dataExportType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. LAW data export instances to be deployed."
                              }
                            },
                            "dataSources": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/dataSourceType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. LAW data sources to configure."
                              }
                            },
                            "tables": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/tableType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. LAW custom tables to be deployed."
                              }
                            },
                            "gallerySolutions": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/gallerySolutionType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. List of gallerySolutions to be created in the log analytics workspace."
                              }
                            },
                            "onboardWorkspaceToSentinel": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Onboard the Log Analytics Workspace to Sentinel. Requires 'SecurityInsights' solution to be in gallerySolutions."
                              }
                            },
                            "dataRetention": {
                              "type": "int",
                              "defaultValue": 365,
                              "minValue": 0,
                              "maxValue": 730,
                              "metadata": {
                                "description": "Optional. Number of days data will be retained for."
                              }
                            },
                            "dailyQuotaGb": {
                              "type": "int",
                              "defaultValue": -1,
                              "minValue": -1,
                              "metadata": {
                                "description": "Optional. The workspace daily quota for ingestion."
                              }
                            },
                            "publicNetworkAccessForIngestion": {
                              "type": "string",
                              "defaultValue": "Enabled",
                              "allowedValues": [
                                "Enabled",
                                "Disabled"
                              ],
                              "metadata": {
                                "description": "Optional. The network access type for accessing Log Analytics ingestion."
                              }
                            },
                            "publicNetworkAccessForQuery": {
                              "type": "string",
                              "defaultValue": "Enabled",
                              "allowedValues": [
                                "Enabled",
                                "Disabled"
                              ],
                              "metadata": {
                                "description": "Optional. The network access type for accessing Log Analytics query."
                              }
                            },
                            "managedIdentities": {
                              "$ref": "#/definitions/managedIdentityAllType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The managed identity definition for this resource. Only one type of identity is supported: system-assigned or user-assigned, but not both."
                              }
                            },
                            "useResourcePermissions": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Set to 'true' to use resource or workspace permissions and 'false' (or leave empty) to require workspace permissions."
                              }
                            },
                            "diagnosticSettings": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/diagnosticSettingType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            },
                            "forceCmkForQuery": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Indicates whether customer managed storage is mandatory for query management."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/roleAssignmentType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), 'SystemAssigned', if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "Security Admin": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb1c8493-542b-48eb-b624-b4c8fea62acd')]",
                              "Security Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '39bc4728-0917-49c7-9d2c-d95423bc2eb4')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.operationalinsights-workspace.{0}.{1}', replace('0.9.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "logAnalyticsWorkspace": {
                              "type": "Microsoft.OperationalInsights/workspaces",
                              "apiVersion": "2022-10-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "features": {
                                  "searchVersion": 1,
                                  "enableLogAccessUsingOnlyResourcePermissions": "[parameters('useResourcePermissions')]"
                                },
                                "sku": {
                                  "name": "[parameters('skuName')]",
                                  "capacityReservationLevel": "[if(equals(parameters('skuName'), 'CapacityReservation'), parameters('skuCapacityReservationLevel'), null())]"
                                },
                                "retentionInDays": "[parameters('dataRetention')]",
                                "workspaceCapping": {
                                  "dailyQuotaGb": "[parameters('dailyQuotaGb')]"
                                },
                                "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
                                "publicNetworkAccessForQuery": "[parameters('publicNetworkAccessForQuery')]",
                                "forceCmkForQuery": "[parameters('forceCmkForQuery')]"
                              },
                              "identity": "[variables('identity')]"
                            },
                            "logAnalyticsWorkspace_diagnosticSettings": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "metrics",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                    "input": {
                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                      "timeGrain": null
                                    }
                                  },
                                  {
                                    "name": "logs",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                    "input": {
                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[if(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'useThisWorkspace'), false()), resourceId('Microsoft.OperationalInsights/workspaces', parameters('name')), tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId'))]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "logAnalyticsWorkspace_sentinelOnboarding": {
                              "condition": "[and(not(empty(filter(coalesce(parameters('gallerySolutions'), createArray()), lambda('item', startsWith(lambdaVariables('item').name, 'SecurityInsights'))))), parameters('onboardWorkspaceToSentinel'))]",
                              "type": "Microsoft.SecurityInsights/onboardingStates",
                              "apiVersion": "2024-03-01",
                              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
                              "name": "default",
                              "properties": {},
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "logAnalyticsWorkspace_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "logAnalyticsWorkspace_roleAssignments": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.OperationalInsights/workspaces', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "logAnalyticsWorkspace_storageInsightConfigs": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_storageInsightConfigs",
                                "count": "[length(coalesce(parameters('storageInsightsConfigs'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-LAW-StorageInsightsConfig-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "logAnalyticsWorkspaceName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "containers": {
                                    "value": "[tryGet(coalesce(parameters('storageInsightsConfigs'), createArray())[copyIndex()], 'containers')]"
                                  },
                                  "tables": {
                                    "value": "[tryGet(coalesce(parameters('storageInsightsConfigs'), createArray())[copyIndex()], 'tables')]"
                                  },
                                  "storageAccountResourceId": {
                                    "value": "[coalesce(parameters('storageInsightsConfigs'), createArray())[copyIndex()].storageAccountResourceId]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.32.4.45862",
                                      "templateHash": "2068175338477699308"
                                    },
                                    "name": "Log Analytics Workspace Storage Insight Configs",
                                    "description": "This module deploys a Log Analytics Workspace Storage Insight Config.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "logAnalyticsWorkspaceName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "[format('{0}-stinsconfig', last(split(parameters('storageAccountResourceId'), '/')))]",
                                      "metadata": {
                                        "description": "Optional. The name of the storage insights config."
                                      }
                                    },
                                    "storageAccountResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The Azure Resource Manager ID of the storage account resource."
                                      }
                                    },
                                    "containers": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The names of the blob containers that the workspace should read."
                                      }
                                    },
                                    "tables": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The names of the Azure tables that the workspace should read."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags to configure in the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "storageAccount": {
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts",
                                      "apiVersion": "2022-09-01",
                                      "name": "[last(split(parameters('storageAccountResourceId'), '/'))]"
                                    },
                                    "workspace": {
                                      "existing": true,
                                      "type": "Microsoft.OperationalInsights/workspaces",
                                      "apiVersion": "2022-10-01",
                                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                                    },
                                    "storageinsightconfig": {
                                      "type": "Microsoft.OperationalInsights/workspaces/storageInsightConfigs",
                                      "apiVersion": "2020-08-01",
                                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "containers": "[parameters('containers')]",
                                        "tables": "[parameters('tables')]",
                                        "storageAccount": {
                                          "id": "[parameters('storageAccountResourceId')]",
                                          "key": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountResourceId'), '/'))), '2022-09-01').keys[0].value]"
                                        }
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed storage insights configuration."
                                      },
                                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/storageInsightConfigs', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group where the storage insight configuration is deployed."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the storage insights configuration."
                                      },
                                      "value": "[parameters('name')]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "logAnalyticsWorkspace_linkedServices": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_linkedServices",
                                "count": "[length(coalesce(parameters('linkedServices'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-LAW-LinkedService-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "logAnalyticsWorkspaceName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('linkedServices'), createArray())[copyIndex()].name]"
                                  },
                                  "resourceId": {
                                    "value": "[tryGet(coalesce(parameters('linkedServices'), createArray())[copyIndex()], 'resourceId')]"
                                  },
                                  "writeAccessResourceId": {
                                    "value": "[tryGet(coalesce(parameters('linkedServices'), createArray())[copyIndex()], 'writeAccessResourceId')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.32.4.45862",
                                      "templateHash": "7966743093368602805"
                                    },
                                    "name": "Log Analytics Workspace Linked Services",
                                    "description": "This module deploys a Log Analytics Workspace Linked Service.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "logAnalyticsWorkspaceName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the link."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require read access."
                                      }
                                    },
                                    "writeAccessResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require write access."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags to configure in the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "workspace": {
                                      "existing": true,
                                      "type": "Microsoft.OperationalInsights/workspaces",
                                      "apiVersion": "2022-10-01",
                                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                                    },
                                    "linkedService": {
                                      "type": "Microsoft.OperationalInsights/workspaces/linkedServices",
                                      "apiVersion": "2020-08-01",
                                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "resourceId": "[parameters('resourceId')]",
                                        "writeAccessResourceId": "[parameters('writeAccessResourceId')]"
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed linked service."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed linked service."
                                      },
                                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/linkedServices', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group where the linked service is deployed."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "logAnalyticsWorkspace_linkedStorageAccounts": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_linkedStorageAccounts",
                                "count": "[length(coalesce(parameters('linkedStorageAccounts'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-LAW-LinkedStorageAccount-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "logAnalyticsWorkspaceName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('linkedStorageAccounts'), createArray())[copyIndex()].name]"
                                  },
                                  "storageAccountIds": {
                                    "value": "[coalesce(parameters('linkedStorageAccounts'), createArray())[copyIndex()].storageAccountIds]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.32.4.45862",
                                      "templateHash": "5881171536836718740"
                                    },
                                    "name": "Log Analytics Workspace Linked Storage Accounts",
                                    "description": "This module deploys a Log Analytics Workspace Linked Storage Account.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "logAnalyticsWorkspaceName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "allowedValues": [
                                        "Query",
                                        "Alerts",
                                        "CustomLogs",
                                        "AzureWatson"
                                      ],
                                      "metadata": {
                                        "description": "Required. Name of the link."
                                      }
                                    },
                                    "storageAccountIds": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "minLength": 1,
                                      "metadata": {
                                        "description": "Required. Linked storage accounts resources Ids."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "workspace": {
                                      "existing": true,
                                      "type": "Microsoft.OperationalInsights/workspaces",
                                      "apiVersion": "2022-10-01",
                                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                                    },
                                    "linkedStorageAccount": {
                                      "type": "Microsoft.OperationalInsights/workspaces/linkedStorageAccounts",
                                      "apiVersion": "2020-08-01",
                                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                                      "properties": {
                                        "storageAccountIds": "[parameters('storageAccountIds')]"
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed linked storage account."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed linked storage account."
                                      },
                                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/linkedStorageAccounts', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group where the linked storage account is deployed."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "logAnalyticsWorkspace_savedSearches": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_savedSearches",
                                "count": "[length(coalesce(parameters('savedSearches'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-LAW-SavedSearch-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "logAnalyticsWorkspaceName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[format('{0}{1}', coalesce(parameters('savedSearches'), createArray())[copyIndex()].name, uniqueString(deployment().name))]"
                                  },
                                  "etag": {
                                    "value": "[tryGet(coalesce(parameters('savedSearches'), createArray())[copyIndex()], 'etag')]"
                                  },
                                  "displayName": {
                                    "value": "[coalesce(parameters('savedSearches'), createArray())[copyIndex()].displayName]"
                                  },
                                  "category": {
                                    "value": "[coalesce(parameters('savedSearches'), createArray())[copyIndex()].category]"
                                  },
                                  "query": {
                                    "value": "[coalesce(parameters('savedSearches'), createArray())[copyIndex()].query]"
                                  },
                                  "functionAlias": {
                                    "value": "[tryGet(coalesce(parameters('savedSearches'), createArray())[copyIndex()], 'functionAlias')]"
                                  },
                                  "functionParameters": {
                                    "value": "[tryGet(coalesce(parameters('savedSearches'), createArray())[copyIndex()], 'functionParameters')]"
                                  },
                                  "tags": {
                                    "value": "[tryGet(coalesce(parameters('savedSearches'), createArray())[copyIndex()], 'tags')]"
                                  },
                                  "version": {
                                    "value": "[tryGet(coalesce(parameters('savedSearches'), createArray())[copyIndex()], 'version')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.32.4.45862",
                                      "templateHash": "11293384964293270173"
                                    },
                                    "name": "Log Analytics Workspace Saved Searches",
                                    "description": "This module deploys a Log Analytics Workspace Saved Search.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "logAnalyticsWorkspaceName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the saved search."
                                      }
                                    },
                                    "displayName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Display name for the search."
                                      }
                                    },
                                    "category": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Query category."
                                      }
                                    },
                                    "query": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Kusto Query to be stored."
                                      }
                                    },
                                    "tags": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags to configure in the resource."
                                      }
                                    },
                                    "functionAlias": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The function alias if query serves as a function."
                                      }
                                    },
                                    "functionParameters": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The optional function parameters if query serves as a function. Value should be in the following format: \"param-name1:type1 = default_value1, param-name2:type2 = default_value2\". For more examples and proper syntax please refer to /azure/kusto/query/functions/user-defined-functions."
                                      }
                                    },
                                    "version": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The version number of the query language."
                                      }
                                    },
                                    "etag": {
                                      "type": "string",
                                      "defaultValue": "*",
                                      "metadata": {
                                        "description": "Optional. The ETag of the saved search. To override an existing saved search, use \"*\" or specify the current Etag."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "workspace": {
                                      "existing": true,
                                      "type": "Microsoft.OperationalInsights/workspaces",
                                      "apiVersion": "2022-10-01",
                                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                                    },
                                    "savedSearch": {
                                      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                                      "apiVersion": "2020-08-01",
                                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                                      "properties": {
                                        "etag": "[parameters('etag')]",
                                        "tags": "[coalesce(parameters('tags'), createArray())]",
                                        "displayName": "[parameters('displayName')]",
                                        "category": "[parameters('category')]",
                                        "query": "[parameters('query')]",
                                        "functionAlias": "[parameters('functionAlias')]",
                                        "functionParameters": "[parameters('functionParameters')]",
                                        "version": "[parameters('version')]"
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed saved search."
                                      },
                                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group where the saved search is deployed."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed saved search."
                                      },
                                      "value": "[parameters('name')]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace",
                                "logAnalyticsWorkspace_linkedStorageAccounts"
                              ]
                            },
                            "logAnalyticsWorkspace_dataExports": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_dataExports",
                                "count": "[length(coalesce(parameters('dataExports'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-LAW-DataExport-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "workspaceName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('dataExports'), createArray())[copyIndex()].name]"
                                  },
                                  "destination": {
                                    "value": "[tryGet(coalesce(parameters('dataExports'), createArray())[copyIndex()], 'destination')]"
                                  },
                                  "enable": {
                                    "value": "[tryGet(coalesce(parameters('dataExports'), createArray())[copyIndex()], 'enable')]"
                                  },
                                  "tableNames": {
                                    "value": "[tryGet(coalesce(parameters('dataExports'), createArray())[copyIndex()], 'tableNames')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.32.4.45862",
                                      "templateHash": "4044138176233388426"
                                    },
                                    "name": "Log Analytics Workspace Data Exports",
                                    "description": "This module deploys a Log Analytics Workspace Data Export.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "destinationType": {
                                      "type": "object",
                                      "properties": {
                                        "resourceId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The destination resource ID."
                                          }
                                        },
                                        "metaData": {
                                          "type": "object",
                                          "properties": {
                                            "eventHubName": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Allows to define an Event Hub name. Not applicable when destination is Storage Account."
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The destination metadata."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The data export destination properties."
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "minLength": 4,
                                      "maxLength": 63,
                                      "metadata": {
                                        "description": "Required. The data export rule name."
                                      }
                                    },
                                    "workspaceName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent workspaces. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "destination": {
                                      "$ref": "#/definitions/destinationType",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Destination properties."
                                      }
                                    },
                                    "enable": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Active when enabled."
                                      }
                                    },
                                    "tableNames": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "minLength": 1,
                                      "metadata": {
                                        "description": "Required. An array of tables to export, for example: ['Heartbeat', 'SecurityEvent']."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "workspace": {
                                      "existing": true,
                                      "type": "Microsoft.OperationalInsights/workspaces",
                                      "apiVersion": "2022-10-01",
                                      "name": "[parameters('workspaceName')]"
                                    },
                                    "dataExport": {
                                      "type": "Microsoft.OperationalInsights/workspaces/dataExports",
                                      "apiVersion": "2020-08-01",
                                      "name": "[format('{0}/{1}', parameters('workspaceName'), parameters('name'))]",
                                      "properties": {
                                        "destination": "[parameters('destination')]",
                                        "enable": "[parameters('enable')]",
                                        "tableNames": "[parameters('tableNames')]"
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the data export."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the data export."
                                      },
                                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/dataExports', parameters('workspaceName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the data export was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "logAnalyticsWorkspace_dataSources": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_dataSources",
                                "count": "[length(coalesce(parameters('dataSources'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-LAW-DataSource-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "logAnalyticsWorkspaceName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('dataSources'), createArray())[copyIndex()].name]"
                                  },
                                  "kind": {
                                    "value": "[coalesce(parameters('dataSources'), createArray())[copyIndex()].kind]"
                                  },
                                  "linkedResourceId": {
                                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'linkedResourceId')]"
                                  },
                                  "eventLogName": {
                                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'eventLogName')]"
                                  },
                                  "eventTypes": {
                                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'eventTypes')]"
                                  },
                                  "objectName": {
                                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'objectName')]"
                                  },
                                  "instanceName": {
                                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'instanceName')]"
                                  },
                                  "intervalSeconds": {
                                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'intervalSeconds')]"
                                  },
                                  "counterName": {
                                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'counterName')]"
                                  },
                                  "state": {
                                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'state')]"
                                  },
                                  "syslogName": {
                                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'syslogName')]"
                                  },
                                  "syslogSeverities": {
                                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'syslogSeverities')]"
                                  },
                                  "performanceCounters": {
                                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'performanceCounters')]"
                                  },
                                  "tags": {
                                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'tags')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.32.4.45862",
                                      "templateHash": "17349115996815882874"
                                    },
                                    "name": "Log Analytics Workspace Datasources",
                                    "description": "This module deploys a Log Analytics Workspace Data Source.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "logAnalyticsWorkspaceName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the data source."
                                      }
                                    },
                                    "kind": {
                                      "type": "string",
                                      "defaultValue": "AzureActivityLog",
                                      "allowedValues": [
                                        "AzureActivityLog",
                                        "WindowsEvent",
                                        "WindowsPerformanceCounter",
                                        "IISLogs",
                                        "LinuxSyslog",
                                        "LinuxSyslogCollection",
                                        "LinuxPerformanceObject",
                                        "LinuxPerformanceCollection"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The kind of the data source."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags to configure in the resource."
                                      }
                                    },
                                    "linkedResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Resource ID of the resource to be linked."
                                      }
                                    },
                                    "eventLogName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Windows event log name to configure when kind is WindowsEvent."
                                      }
                                    },
                                    "eventTypes": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Windows event types to configure when kind is WindowsEvent."
                                      }
                                    },
                                    "objectName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Name of the object to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                                      }
                                    },
                                    "instanceName": {
                                      "type": "string",
                                      "defaultValue": "*",
                                      "metadata": {
                                        "description": "Optional. Name of the instance to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                                      }
                                    },
                                    "intervalSeconds": {
                                      "type": "int",
                                      "defaultValue": 60,
                                      "metadata": {
                                        "description": "Optional. Interval in seconds to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                                      }
                                    },
                                    "performanceCounters": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. List of counters to configure when the kind is LinuxPerformanceObject."
                                      }
                                    },
                                    "counterName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Counter name to configure when kind is WindowsPerformanceCounter."
                                      }
                                    },
                                    "state": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. State to configure when kind is IISLogs or LinuxSyslogCollection or LinuxPerformanceCollection."
                                      }
                                    },
                                    "syslogName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. System log to configure when kind is LinuxSyslog."
                                      }
                                    },
                                    "syslogSeverities": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Severities to configure when kind is LinuxSyslog."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "workspace": {
                                      "existing": true,
                                      "type": "Microsoft.OperationalInsights/workspaces",
                                      "apiVersion": "2022-10-01",
                                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                                    },
                                    "dataSource": {
                                      "type": "Microsoft.OperationalInsights/workspaces/dataSources",
                                      "apiVersion": "2020-08-01",
                                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                                      "kind": "[parameters('kind')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "linkedResourceId": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'AzureActivityLog')), parameters('linkedResourceId'), null())]",
                                        "eventLogName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsEvent')), parameters('eventLogName'), null())]",
                                        "eventTypes": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsEvent')), parameters('eventTypes'), null())]",
                                        "objectName": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('objectName'), null())]",
                                        "instanceName": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('instanceName'), null())]",
                                        "intervalSeconds": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('intervalSeconds'), null())]",
                                        "counterName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsPerformanceCounter')), parameters('counterName'), null())]",
                                        "state": "[if(and(not(empty(parameters('kind'))), or(or(equals(parameters('kind'), 'IISLogs'), equals(parameters('kind'), 'LinuxSyslogCollection')), equals(parameters('kind'), 'LinuxPerformanceCollection'))), parameters('state'), null())]",
                                        "syslogName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'LinuxSyslog')), parameters('syslogName'), null())]",
                                        "syslogSeverities": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'LinuxSyslog'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('syslogSeverities'), null())]",
                                        "performanceCounters": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'LinuxPerformanceObject')), parameters('performanceCounters'), null())]"
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed data source."
                                      },
                                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/dataSources', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group where the data source is deployed."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed data source."
                                      },
                                      "value": "[parameters('name')]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "logAnalyticsWorkspace_tables": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_tables",
                                "count": "[length(coalesce(parameters('tables'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-LAW-Table-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "workspaceName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('tables'), createArray())[copyIndex()].name]"
                                  },
                                  "plan": {
                                    "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'plan')]"
                                  },
                                  "schema": {
                                    "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'schema')]"
                                  },
                                  "retentionInDays": {
                                    "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'retentionInDays')]"
                                  },
                                  "totalRetentionInDays": {
                                    "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'totalRetentionInDays')]"
                                  },
                                  "restoredLogs": {
                                    "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'restoredLogs')]"
                                  },
                                  "searchResults": {
                                    "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'searchResults')]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.32.4.45862",
                                      "templateHash": "16645325284402756922"
                                    },
                                    "name": "Log Analytics Workspace Tables",
                                    "description": "This module deploys a Log Analytics Workspace Table.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "restoredLogsType": {
                                      "type": "object",
                                      "properties": {
                                        "sourceTable": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The table to restore data from."
                                          }
                                        },
                                        "startRestoreTime": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The timestamp to start the restore from (UTC)."
                                          }
                                        },
                                        "endRestoreTime": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The timestamp to end the restore by (UTC)."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The parameters of the restore operation that initiated the table."
                                      }
                                    },
                                    "schemaType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The table name."
                                          }
                                        },
                                        "columns": {
                                          "type": "array",
                                          "items": {
                                            "$ref": "#/definitions/columnType"
                                          },
                                          "metadata": {
                                            "description": "Required. A list of table custom columns."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The table description."
                                          }
                                        },
                                        "displayName": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The table display name."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The table schema."
                                      }
                                    },
                                    "columnType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The column name."
                                          }
                                        },
                                        "type": {
                                          "type": "string",
                                          "allowedValues": [
                                            "boolean",
                                            "dateTime",
                                            "dynamic",
                                            "guid",
                                            "int",
                                            "long",
                                            "real",
                                            "string"
                                          ],
                                          "metadata": {
                                            "description": "Required. The column type."
                                          }
                                        },
                                        "dataTypeHint": {
                                          "type": "string",
                                          "allowedValues": [
                                            "armPath",
                                            "guid",
                                            "ip",
                                            "uri"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The column data type logical hint."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The column description."
                                          }
                                        },
                                        "displayName": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Column display name."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The parameters of the table column."
                                      }
                                    },
                                    "searchResultsType": {
                                      "type": "object",
                                      "properties": {
                                        "query": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The search job query."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The search description."
                                          }
                                        },
                                        "limit": {
                                          "type": "int",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Limit the search job to return up to specified number of rows."
                                          }
                                        },
                                        "startSearchTime": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The timestamp to start the search from (UTC)."
                                          }
                                        },
                                        "endSearchTime": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The timestamp to end the search by (UTC)."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The parameters of the search job that initiated the table."
                                      }
                                    },
                                    "roleAssignmentType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                          }
                                        },
                                        "roleDefinitionIdOrName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                          }
                                        },
                                        "principalId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                          }
                                        },
                                        "principalType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Device",
                                            "ForeignGroup",
                                            "Group",
                                            "ServicePrincipal",
                                            "User"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The principal type of the assigned principal ID."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The description of the role assignment."
                                          }
                                        },
                                        "condition": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                          }
                                        },
                                        "conditionVersion": {
                                          "type": "string",
                                          "allowedValues": [
                                            "2.0"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Version of the condition."
                                          }
                                        },
                                        "delegatedManagedIdentityResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a role assignment.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the table."
                                      }
                                    },
                                    "workspaceName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent workspaces. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "plan": {
                                      "type": "string",
                                      "defaultValue": "Analytics",
                                      "allowedValues": [
                                        "Basic",
                                        "Analytics"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Instruct the system how to handle and charge the logs ingested to this table."
                                      }
                                    },
                                    "restoredLogs": {
                                      "$ref": "#/definitions/restoredLogsType",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Restore parameters."
                                      }
                                    },
                                    "retentionInDays": {
                                      "type": "int",
                                      "defaultValue": -1,
                                      "minValue": -1,
                                      "maxValue": 730,
                                      "metadata": {
                                        "description": "Optional. The table retention in days, between 4 and 730. Setting this property to -1 will default to the workspace retention."
                                      }
                                    },
                                    "schema": {
                                      "$ref": "#/definitions/schemaType",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Table's schema."
                                      }
                                    },
                                    "searchResults": {
                                      "$ref": "#/definitions/searchResultsType",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Parameters of the search job that initiated this table."
                                      }
                                    },
                                    "totalRetentionInDays": {
                                      "type": "int",
                                      "defaultValue": -1,
                                      "minValue": -1,
                                      "maxValue": 2555,
                                      "metadata": {
                                        "description": "Optional. The table total retention in days, between 4 and 2555. Setting this property to -1 will default to table retention."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/roleAssignmentType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                      "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                      "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "workspace": {
                                      "existing": true,
                                      "type": "Microsoft.OperationalInsights/workspaces",
                                      "apiVersion": "2022-10-01",
                                      "name": "[parameters('workspaceName')]"
                                    },
                                    "table": {
                                      "type": "Microsoft.OperationalInsights/workspaces/tables",
                                      "apiVersion": "2022-10-01",
                                      "name": "[format('{0}/{1}', parameters('workspaceName'), parameters('name'))]",
                                      "properties": {
                                        "plan": "[parameters('plan')]",
                                        "restoredLogs": "[parameters('restoredLogs')]",
                                        "retentionInDays": "[parameters('retentionInDays')]",
                                        "schema": "[parameters('schema')]",
                                        "searchResults": "[parameters('searchResults')]",
                                        "totalRetentionInDays": "[parameters('totalRetentionInDays')]"
                                      }
                                    },
                                    "table_roleAssignments": {
                                      "copy": {
                                        "name": "table_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}/tables/{1}', parameters('workspaceName'), parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.OperationalInsights/workspaces/tables', parameters('workspaceName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "table"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the table."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the table."
                                      },
                                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/tables', parameters('workspaceName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the table was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "logAnalyticsWorkspace_solutions": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_solutions",
                                "count": "[length(coalesce(parameters('gallerySolutions'), createArray()))]"
                              },
                              "condition": "[not(empty(parameters('gallerySolutions')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-LAW-Solution-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(parameters('gallerySolutions'), createArray())[copyIndex()].name]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "logAnalyticsWorkspaceName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "plan": {
                                    "value": "[coalesce(parameters('gallerySolutions'), createArray())[copyIndex()].plan]"
                                  },
                                  "enableTelemetry": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('gallerySolutions'), createArray())[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.30.23.60470",
                                      "templateHash": "1867653058254938383"
                                    },
                                    "name": "Operations Management Solutions",
                                    "description": "This module deploys an Operations Management Solution.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "solutionPlanType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of the solution to be created.\nFor solutions authored by Microsoft, the name must be in the pattern: `SolutionType(WorkspaceName)`, for example: `AntiMalware(contoso-Logs)`.\nFor solutions authored by third parties, it can be anything.\nThe solution type is case-sensitive.\nIf not provided, the value of the `name` parameter will be used."
                                          }
                                        },
                                        "product": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The product name of the deployed solution.\nFor Microsoft published gallery solution it should be `OMSGallery/{solutionType}`, for example `OMSGallery/AntiMalware`.\nFor a third party solution, it can be anything.\nThis is case sensitive."
                                          }
                                        },
                                        "publisher": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The publisher name of the deployed solution. For Microsoft published gallery solution, it is `Microsoft`, which is the default value."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the solution.\nFor solutions authored by Microsoft, the name must be in the pattern: `SolutionType(WorkspaceName)`, for example: `AntiMalware(contoso-Logs)`.\nFor solutions authored by third parties, the name should be in the pattern: `SolutionType[WorkspaceName]`, for example `MySolution[contoso-Logs]`.\nThe solution type is case-sensitive."
                                      }
                                    },
                                    "plan": {
                                      "$ref": "#/definitions/solutionPlanType",
                                      "metadata": {
                                        "description": "Required. Plan for solution object supported by the OperationsManagement resource provider."
                                      }
                                    },
                                    "logAnalyticsWorkspaceName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the Log Analytics workspace where the solution will be deployed/enabled."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all resources."
                                      }
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "avmTelemetry": {
                                      "condition": "[parameters('enableTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2024-03-01",
                                      "name": "[format('46d3xbcp.res.operationsmanagement-solution.{0}.{1}', replace('0.3.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": [],
                                          "outputs": {
                                            "telemetry": {
                                              "type": "String",
                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "logAnalyticsWorkspace": {
                                      "existing": true,
                                      "type": "Microsoft.OperationalInsights/workspaces",
                                      "apiVersion": "2021-06-01",
                                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                                    },
                                    "solution": {
                                      "type": "Microsoft.OperationsManagement/solutions",
                                      "apiVersion": "2015-11-01-preview",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "properties": {
                                        "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
                                      },
                                      "plan": {
                                        "name": "[coalesce(tryGet(parameters('plan'), 'name'), parameters('name'))]",
                                        "promotionCode": "",
                                        "product": "[parameters('plan').product]",
                                        "publisher": "[coalesce(tryGet(parameters('plan'), 'publisher'), 'Microsoft')]"
                                      },
                                      "dependsOn": [
                                        "logAnalyticsWorkspace"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed solution."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed solution."
                                      },
                                      "value": "[resourceId('Microsoft.OperationsManagement/solutions', parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group where the solution is deployed."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('solution', '2015-11-01-preview', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed log analytics workspace."
                              },
                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed log analytics workspace."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed log analytics workspace."
                              },
                              "value": "[parameters('name')]"
                            },
                            "logAnalyticsWorkspaceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The ID associated with the workspace."
                              },
                              "value": "[reference('logAnalyticsWorkspace').customerId]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('logAnalyticsWorkspace', '2022-10-01', 'full').location]"
                            },
                            "systemAssignedMIPrincipalId": {
                              "type": "string",
                              "metadata": {
                                "description": "The principal ID of the system assigned identity."
                              },
                              "value": "[coalesce(tryGet(tryGet(reference('logAnalyticsWorkspace', '2022-10-01', 'full'), 'identity'), 'principalId'), '')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Log Analytics workspace ID"
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-log-analytics', uniqueString(deployment().name, parameters('location')))), '2025-04-01').outputs.resourceId.value]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Log Analytics workspace name"
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-log-analytics', uniqueString(deployment().name, parameters('location')))), '2025-04-01').outputs.name.value]"
                    },
                    "customerId": {
                      "type": "string",
                      "metadata": {
                        "description": "Log Analytics workspace customer ID"
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-log-analytics', uniqueString(deployment().name, parameters('location')))), '2025-04-01').outputs.logAnalyticsWorkspaceId.value]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2025-04-01",
              "name": "[format('{0}-container-registry', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "acrName": {
                    "value": "[parameters('acrName')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.38.5.1644",
                      "templateHash": "7454938926363131454"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure region for resources"
                      }
                    },
                    "acrName": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure Container Registry name (must be globally unique)"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "Tags to apply to resources"
                      }
                    },
                    "acrSku": {
                      "type": "string",
                      "defaultValue": "Basic",
                      "metadata": {
                        "description": "ACR SKU"
                      }
                    },
                    "acrAdminUserEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Enable ACR admin user"
                      }
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "metadata": {
                        "description": "Public network access setting"
                      }
                    }
                  },
                  "resources": {
                    "acr": {
                      "existing": true,
                      "type": "Microsoft.ContainerRegistry/registries",
                      "apiVersion": "2023-07-01",
                      "name": "[parameters('acrName')]",
                      "dependsOn": [
                        "containerRegistry"
                      ]
                    },
                    "containerRegistry": {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2025-04-01",
                      "name": "[format('{0}-acr', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('acrName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "acrSku": {
                            "value": "[parameters('acrSku')]"
                          },
                          "acrAdminUserEnabled": {
                            "value": "[parameters('acrAdminUserEnabled')]"
                          },
                          "publicNetworkAccess": {
                            "value": "[parameters('publicNetworkAccess')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.33.13.18514",
                              "templateHash": "5689614393575864860"
                            },
                            "name": "Azure Container Registries (ACR)",
                            "description": "This module deploys an Azure Container Registry (ACR)."
                          },
                          "definitions": {
                            "scopeMapsType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the scope map."
                                  }
                                },
                                "actions": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. The list of scoped permissions for registry artifacts."
                                  }
                                },
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The user friendly description of the scope map."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "_1.privateEndpointCustomDnsConfigType": {
                              "type": "object",
                              "properties": {
                                "fqdn": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. FQDN that resolves to private endpoint IP address."
                                  }
                                },
                                "ipAddresses": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of private IP addresses of the private endpoint."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.4.0"
                                }
                              }
                            },
                            "_1.privateEndpointIpConfigurationType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the resource that is unique within a resource group."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "groupId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                      }
                                    },
                                    "memberName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                                      }
                                    },
                                    "privateIPAddress": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Properties of private endpoint IP configurations."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.4.0"
                                }
                              }
                            },
                            "_1.privateEndpointPrivateDnsZoneGroupType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the Private DNS Zone Group."
                                  }
                                },
                                "privateDnsZoneGroupConfigs": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The name of the private DNS Zone Group config."
                                        }
                                      },
                                      "privateDnsZoneResourceId": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The resource id of the private DNS zone."
                                        }
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. The private DNS Zone Groups to associate the Private Endpoint. A DNS Zone Group can support up to 5 DNS zones."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.4.0"
                                }
                              }
                            },
                            "customerManagedKeyWithAutoRotateType": {
                              "type": "object",
                              "properties": {
                                "keyVaultResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The resource ID of a key vault to reference a customer managed key for encryption from."
                                  }
                                },
                                "keyName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the customer managed key to use for encryption."
                                  }
                                },
                                "keyVersion": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, using version as per 'autoRotationEnabled' setting."
                                  }
                                },
                                "autoRotationEnabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable auto-rotating to the latest key version. Default is `true`. If set to `false`, the latest key version at the time of the deployment is used."
                                  }
                                },
                                "userAssignedIdentityResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. User assigned identity to use when fetching the customer managed key. Required if no system assigned identity is available for use."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a customer-managed key. To be used if the resource type supports auto-rotation of the customer-managed key.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.4.0"
                                }
                              }
                            },
                            "diagnosticSettingFullType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the diagnostic setting."
                                  }
                                },
                                "logCategoriesAndGroups": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "category": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                        }
                                      },
                                      "categoryGroup": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                        }
                                      },
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                  }
                                },
                                "metricCategories": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "category": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                        }
                                      },
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                  }
                                },
                                "logAnalyticsDestinationType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "AzureDiagnostics",
                                    "Dedicated"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                  }
                                },
                                "workspaceResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "storageAccountResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "eventHubAuthorizationRuleResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                  }
                                },
                                "eventHubName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "marketplacePartnerResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.4.0"
                                }
                              }
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a lock.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.4.0"
                                }
                              }
                            },
                            "managedIdentityAllType": {
                              "type": "object",
                              "properties": {
                                "systemAssigned": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enables system assigned managed identity on the resource."
                                  }
                                },
                                "userAssignedResourceIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.4.0"
                                }
                              }
                            },
                            "privateEndpointSingleServiceType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the Private Endpoint."
                                  }
                                },
                                "location": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The location to deploy the Private Endpoint to."
                                  }
                                },
                                "privateLinkServiceConnectionName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the private link connection to create."
                                  }
                                },
                                "service": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The subresource to deploy the Private Endpoint for. For example \"vault\" for a Key Vault Private Endpoint."
                                  }
                                },
                                "subnetResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                                  }
                                },
                                "privateDnsZoneGroup": {
                                  "$ref": "#/definitions/_1.privateEndpointPrivateDnsZoneGroupType",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The private DNS Zone Group to configure for the Private Endpoint."
                                  }
                                },
                                "isManualConnection": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. If Manual Private Link Connection is required."
                                  }
                                },
                                "manualConnectionRequestMessage": {
                                  "type": "string",
                                  "nullable": true,
                                  "maxLength": 140,
                                  "metadata": {
                                    "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                                  }
                                },
                                "customDnsConfigs": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/_1.privateEndpointCustomDnsConfigType"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Custom DNS configurations."
                                  }
                                },
                                "ipConfigurations": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/_1.privateEndpointIpConfigurationType"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A list of IP configurations of the Private Endpoint. This will be used to map to the first-party Service endpoints."
                                  }
                                },
                                "applicationSecurityGroupResourceIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Application security groups in which the Private Endpoint IP configuration is included."
                                  }
                                },
                                "customNetworkInterfaceName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The custom name of the network interface attached to the Private Endpoint."
                                  }
                                },
                                "lock": {
                                  "$ref": "#/definitions/lockType",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                },
                                "roleAssignments": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/roleAssignmentType"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Array of role assignments to create."
                                  }
                                },
                                "tags": {
                                  "type": "object",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Tags to be applied on all resources/Resource Groups in this deployment."
                                  }
                                },
                                "enableTelemetry": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable/Disable usage telemetry for module."
                                  }
                                },
                                "resourceGroupName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify if you want to deploy the Private Endpoint into a different Resource Group than the main resource."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a private endpoint. To be used if the private endpoint's default service / groupId can be assumed (i.e., for services that only have one Private Endpoint type like 'vault' for key vault).",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.4.0"
                                }
                              }
                            },
                            "roleAssignmentType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                  }
                                },
                                "roleDefinitionIdOrName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                  }
                                },
                                "principalId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                  }
                                },
                                "principalType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Device",
                                    "ForeignGroup",
                                    "Group",
                                    "ServicePrincipal",
                                    "User"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The principal type of the assigned principal ID."
                                  }
                                },
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The description of the role assignment."
                                  }
                                },
                                "condition": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                  }
                                },
                                "conditionVersion": {
                                  "type": "string",
                                  "allowedValues": [
                                    "2.0"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Version of the condition."
                                  }
                                },
                                "delegatedManagedIdentityResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a role assignment.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.4.0"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "minLength": 5,
                              "maxLength": 50,
                              "metadata": {
                                "description": "Required. Name of your Azure Container Registry."
                              }
                            },
                            "acrAdminUserEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Enable admin user that have push / pull permission to the registry."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "roleAssignments": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/roleAssignmentType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "acrSku": {
                              "type": "string",
                              "defaultValue": "Premium",
                              "allowedValues": [
                                "Basic",
                                "Premium",
                                "Standard"
                              ],
                              "metadata": {
                                "description": "Optional. Tier of your Azure container registry."
                              }
                            },
                            "exportPolicyStatus": {
                              "type": "string",
                              "defaultValue": "disabled",
                              "allowedValues": [
                                "disabled",
                                "enabled"
                              ],
                              "metadata": {
                                "description": "Optional. The value that indicates whether the export policy is enabled or not."
                              }
                            },
                            "quarantinePolicyStatus": {
                              "type": "string",
                              "defaultValue": "disabled",
                              "allowedValues": [
                                "disabled",
                                "enabled"
                              ],
                              "metadata": {
                                "description": "Optional. The value that indicates whether the quarantine policy is enabled or not. Note, requires the 'acrSku' to be 'Premium'."
                              }
                            },
                            "trustPolicyStatus": {
                              "type": "string",
                              "defaultValue": "disabled",
                              "allowedValues": [
                                "disabled",
                                "enabled"
                              ],
                              "metadata": {
                                "description": "Optional. The value that indicates whether the trust policy is enabled or not. Note, requires the 'acrSku' to be 'Premium'."
                              }
                            },
                            "retentionPolicyStatus": {
                              "type": "string",
                              "defaultValue": "enabled",
                              "allowedValues": [
                                "disabled",
                                "enabled"
                              ],
                              "metadata": {
                                "description": "Optional. The value that indicates whether the retention policy is enabled or not."
                              }
                            },
                            "retentionPolicyDays": {
                              "type": "int",
                              "defaultValue": 15,
                              "metadata": {
                                "description": "Optional. The number of days to retain an untagged manifest after which it gets purged."
                              }
                            },
                            "azureADAuthenticationAsArmPolicyStatus": {
                              "type": "string",
                              "defaultValue": "enabled",
                              "allowedValues": [
                                "disabled",
                                "enabled"
                              ],
                              "metadata": {
                                "description": "Optional. The value that indicates whether the policy for using ARM audience token for a container registr is enabled or not. Default is enabled."
                              }
                            },
                            "softDeletePolicyStatus": {
                              "type": "string",
                              "defaultValue": "disabled",
                              "allowedValues": [
                                "disabled",
                                "enabled"
                              ],
                              "metadata": {
                                "description": "Optional. Soft Delete policy status. Default is disabled."
                              }
                            },
                            "softDeletePolicyDays": {
                              "type": "int",
                              "defaultValue": 7,
                              "metadata": {
                                "description": "Optional. The number of days after which a soft-deleted item is permanently deleted."
                              }
                            },
                            "dataEndpointEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Enable a single data endpoint per region for serving data. Not relevant in case of disabled public access. Note, requires the 'acrSku' to be 'Premium'."
                              }
                            },
                            "publicNetworkAccess": {
                              "type": "string",
                              "nullable": true,
                              "allowedValues": [
                                "Enabled",
                                "Disabled"
                              ],
                              "metadata": {
                                "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkRuleSetIpRules are not set.  Note, requires the 'acrSku' to be 'Premium'."
                              }
                            },
                            "networkRuleBypassOptions": {
                              "type": "string",
                              "defaultValue": "AzureServices",
                              "allowedValues": [
                                "AzureServices",
                                "None"
                              ],
                              "metadata": {
                                "description": "Optional. Whether to allow trusted Azure services to access a network restricted registry."
                              }
                            },
                            "networkRuleSetDefaultAction": {
                              "type": "string",
                              "defaultValue": "Deny",
                              "allowedValues": [
                                "Allow",
                                "Deny"
                              ],
                              "metadata": {
                                "description": "Optional. The default action of allow or deny when no other rules match."
                              }
                            },
                            "networkRuleSetIpRules": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The IP ACL rules. Note, requires the 'acrSku' to be 'Premium'."
                              }
                            },
                            "privateEndpoints": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateEndpointSingleServiceType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible. Note, requires the 'acrSku' to be 'Premium'."
                              }
                            },
                            "zoneRedundancy": {
                              "type": "string",
                              "defaultValue": "Enabled",
                              "allowedValues": [
                                "Disabled",
                                "Enabled"
                              ],
                              "metadata": {
                                "description": "Optional. Whether or not zone redundancy is enabled for this container registry."
                              }
                            },
                            "replications": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. All replications to create."
                              }
                            },
                            "webhooks": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. All webhooks to create."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "managedIdentities": {
                              "$ref": "#/definitions/managedIdentityAllType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The managed identity definition for this resource."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            },
                            "diagnosticSettings": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/diagnosticSettingFullType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            },
                            "anonymousPullEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Enables registry-wide pull from unauthenticated clients. It's in preview and available in the Standard and Premium service tiers."
                              }
                            },
                            "customerManagedKey": {
                              "$ref": "#/definitions/customerManagedKeyWithAutoRotateType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The customer managed key definition."
                              }
                            },
                            "cacheRules": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Array of Cache Rules."
                              }
                            },
                            "credentialSets": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of Credential Sets."
                              }
                            },
                            "scopeMaps": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/scopeMapsType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Scope maps setting."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                            "builtInRoleNames": {
                              "AcrDelete": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c2f4ef07-c644-48eb-af81-4b1b4947fb11')]",
                              "AcrImageSigner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6cef56e8-d556-48e5-a04f-b8e64114680f')]",
                              "AcrPull": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
                              "AcrPush": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8311e382-0749-4cb8-b61a-304f252e45ec')]",
                              "AcrQuarantineReader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'cdda3590-29a3-44f6-95f2-9f980659eb04')]",
                              "AcrQuarantineWriter": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c8d4ff99-41c3-41a8-9f60-21dfdad59608')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "cMKKeyVault::cMKKey": {
                              "condition": "[and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), not(empty(tryGet(parameters('customerManagedKey'), 'keyName')))))]",
                              "existing": true,
                              "type": "Microsoft.KeyVault/vaults/keys",
                              "apiVersion": "2023-02-01",
                              "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '//'), '/')[2]]",
                              "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '////'), '/')[4]]",
                              "name": "[format('{0}/{1}', last(split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), 'dummyVault'), '/')), coalesce(tryGet(parameters('customerManagedKey'), 'keyName'), 'dummyKey'))]"
                            },
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.containerregistry-registry.{0}.{1}', replace('0.7.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "cMKKeyVault": {
                              "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId')))]",
                              "existing": true,
                              "type": "Microsoft.KeyVault/vaults",
                              "apiVersion": "2023-02-01",
                              "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '//'), '/')[2]]",
                              "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '////'), '/')[4]]",
                              "name": "[last(split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), 'dummyVault'), '/'))]"
                            },
                            "cMKUserAssignedIdentity": {
                              "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId')))]",
                              "existing": true,
                              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                              "apiVersion": "2023-01-31",
                              "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '//'), '/')[2]]",
                              "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '////'), '/')[4]]",
                              "name": "[last(split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), 'dummyMsi'), '/'))]"
                            },
                            "registry": {
                              "type": "Microsoft.ContainerRegistry/registries",
                              "apiVersion": "2023-06-01-preview",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "identity": "[variables('identity')]",
                              "tags": "[parameters('tags')]",
                              "sku": {
                                "name": "[parameters('acrSku')]"
                              },
                              "properties": {
                                "anonymousPullEnabled": "[parameters('anonymousPullEnabled')]",
                                "adminUserEnabled": "[parameters('acrAdminUserEnabled')]",
                                "encryption": "[if(not(empty(parameters('customerManagedKey'))), createObject('status', 'enabled', 'keyVaultProperties', createObject('identity', if(not(empty(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), ''))), reference('cMKUserAssignedIdentity').clientId, null()), 'keyIdentifier', if(not(empty(tryGet(parameters('customerManagedKey'), 'keyVersion'))), format('{0}/{1}', reference('cMKKeyVault::cMKKey').keyUri, parameters('customerManagedKey').keyVersion), if(coalesce(tryGet(parameters('customerManagedKey'), 'autoRotationEnabled'), true()), reference('cMKKeyVault::cMKKey').keyUri, reference('cMKKeyVault::cMKKey').keyUriWithVersion)))), null())]",
                                "policies": {
                                  "azureADAuthenticationAsArmPolicy": {
                                    "status": "[parameters('azureADAuthenticationAsArmPolicyStatus')]"
                                  },
                                  "exportPolicy": "[if(equals(parameters('acrSku'), 'Premium'), createObject('status', parameters('exportPolicyStatus')), null())]",
                                  "quarantinePolicy": "[if(equals(parameters('acrSku'), 'Premium'), createObject('status', parameters('quarantinePolicyStatus')), null())]",
                                  "trustPolicy": "[if(equals(parameters('acrSku'), 'Premium'), createObject('type', 'Notary', 'status', parameters('trustPolicyStatus')), null())]",
                                  "retentionPolicy": "[if(equals(parameters('acrSku'), 'Premium'), createObject('days', parameters('retentionPolicyDays'), 'status', parameters('retentionPolicyStatus')), null())]",
                                  "softDeletePolicy": {
                                    "retentionDays": "[parameters('softDeletePolicyDays')]",
                                    "status": "[parameters('softDeletePolicyStatus')]"
                                  }
                                },
                                "dataEndpointEnabled": "[parameters('dataEndpointEnabled')]",
                                "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(not(empty(parameters('privateEndpoints'))), empty(parameters('networkRuleSetIpRules'))), 'Disabled', null()))]",
                                "networkRuleBypassOptions": "[parameters('networkRuleBypassOptions')]",
                                "networkRuleSet": "[if(not(empty(parameters('networkRuleSetIpRules'))), createObject('defaultAction', parameters('networkRuleSetDefaultAction'), 'ipRules', parameters('networkRuleSetIpRules')), null())]",
                                "zoneRedundancy": "[if(equals(parameters('acrSku'), 'Premium'), parameters('zoneRedundancy'), null())]"
                              },
                              "dependsOn": [
                                "cMKKeyVault::cMKKey",
                                "cMKUserAssignedIdentity"
                              ]
                            },
                            "registry_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "registry"
                              ]
                            },
                            "registry_diagnosticSettings": {
                              "copy": {
                                "name": "registry_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "metrics",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                    "input": {
                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                      "timeGrain": null
                                    }
                                  },
                                  {
                                    "name": "logs",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                    "input": {
                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "registry"
                              ]
                            },
                            "registry_roleAssignments": {
                              "copy": {
                                "name": "registry_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "registry"
                              ]
                            },
                            "registry_scopeMaps": {
                              "copy": {
                                "name": "registry_scopeMaps",
                                "count": "[length(coalesce(parameters('scopeMaps'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Registry-Scope-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[tryGet(coalesce(parameters('scopeMaps'), createArray())[copyIndex()], 'name')]"
                                  },
                                  "actions": {
                                    "value": "[coalesce(parameters('scopeMaps'), createArray())[copyIndex()].actions]"
                                  },
                                  "description": {
                                    "value": "[tryGet(coalesce(parameters('scopeMaps'), createArray())[copyIndex()], 'description')]"
                                  },
                                  "registryName": {
                                    "value": "[parameters('name')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.33.13.18514",
                                      "templateHash": "8957375042269792339"
                                    },
                                    "name": "Container Registries scopeMaps",
                                    "description": "This module deploys an Azure Container Registry (ACR) scopeMap."
                                  },
                                  "parameters": {
                                    "registryName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent registry. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "[format('{0}-scopemaps', parameters('registryName'))]",
                                      "metadata": {
                                        "description": "Optional. The name of the scope map."
                                      }
                                    },
                                    "actions": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "metadata": {
                                        "description": "Required. The list of scoped permissions for registry artifacts."
                                      }
                                    },
                                    "description": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The user friendly description of the scope map."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "registry": {
                                      "existing": true,
                                      "type": "Microsoft.ContainerRegistry/registries",
                                      "apiVersion": "2023-06-01-preview",
                                      "name": "[parameters('registryName')]"
                                    },
                                    "scopeMap": {
                                      "type": "Microsoft.ContainerRegistry/registries/scopeMaps",
                                      "apiVersion": "2023-06-01-preview",
                                      "name": "[format('{0}/{1}', parameters('registryName'), parameters('name'))]",
                                      "properties": {
                                        "actions": "[parameters('actions')]",
                                        "description": "[parameters('description')]"
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the scope map."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the scope map was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the scope map."
                                      },
                                      "value": "[resourceId('Microsoft.ContainerRegistry/registries/scopeMaps', parameters('registryName'), parameters('name'))]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "registry"
                              ]
                            },
                            "registry_replications": {
                              "copy": {
                                "name": "registry_replications",
                                "count": "[length(coalesce(parameters('replications'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Registry-Replication-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(parameters('replications'), createArray())[copyIndex()].name]"
                                  },
                                  "registryName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "location": {
                                    "value": "[coalesce(parameters('replications'), createArray())[copyIndex()].location]"
                                  },
                                  "regionEndpointEnabled": {
                                    "value": "[tryGet(coalesce(parameters('replications'), createArray())[copyIndex()], 'regionEndpointEnabled')]"
                                  },
                                  "zoneRedundancy": {
                                    "value": "[tryGet(coalesce(parameters('replications'), createArray())[copyIndex()], 'zoneRedundancy')]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('replications'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.33.13.18514",
                                      "templateHash": "2771208879484692364"
                                    },
                                    "name": "Azure Container Registry (ACR) Replications",
                                    "description": "This module deploys an Azure Container Registry (ACR) Replication."
                                  },
                                  "parameters": {
                                    "registryName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent registry. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the replication."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all resources."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "regionEndpointEnabled": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Specifies whether the replication regional endpoint is enabled. Requests will not be routed to a replication whose regional endpoint is disabled, however its data will continue to be synced with other replications."
                                      }
                                    },
                                    "zoneRedundancy": {
                                      "type": "string",
                                      "defaultValue": "Disabled",
                                      "allowedValues": [
                                        "Disabled",
                                        "Enabled"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Whether or not zone redundancy is enabled for this container registry."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "registry": {
                                      "existing": true,
                                      "type": "Microsoft.ContainerRegistry/registries",
                                      "apiVersion": "2023-06-01-preview",
                                      "name": "[parameters('registryName')]"
                                    },
                                    "replication": {
                                      "type": "Microsoft.ContainerRegistry/registries/replications",
                                      "apiVersion": "2023-06-01-preview",
                                      "name": "[format('{0}/{1}', parameters('registryName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "regionEndpointEnabled": "[parameters('regionEndpointEnabled')]",
                                        "zoneRedundancy": "[parameters('zoneRedundancy')]"
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the replication."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the replication."
                                      },
                                      "value": "[resourceId('Microsoft.ContainerRegistry/registries/replications', parameters('registryName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the replication was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('replication', '2023-06-01-preview', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "registry"
                              ]
                            },
                            "registry_credentialSets": {
                              "copy": {
                                "name": "registry_credentialSets",
                                "count": "[length(coalesce(parameters('credentialSets'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Registry-CredentialSet-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(parameters('credentialSets'), createArray())[copyIndex()].name]"
                                  },
                                  "registryName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "managedIdentities": {
                                    "value": "[coalesce(parameters('credentialSets'), createArray())[copyIndex()].managedIdentities]"
                                  },
                                  "authCredentials": {
                                    "value": "[coalesce(parameters('credentialSets'), createArray())[copyIndex()].authCredentials]"
                                  },
                                  "loginServer": {
                                    "value": "[coalesce(parameters('credentialSets'), createArray())[copyIndex()].loginServer]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.33.13.18514",
                                      "templateHash": "6185797881934265021"
                                    },
                                    "name": "Container Registries Credential Sets",
                                    "description": "This module deploys an ACR Credential Set."
                                  },
                                  "definitions": {
                                    "managedIdentitiesType": {
                                      "type": "object",
                                      "properties": {
                                        "systemAssigned": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enables system assigned managed identity on the resource."
                                          }
                                        }
                                      }
                                    },
                                    "authCredentialsType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The name of the credential."
                                            }
                                          },
                                          "usernameSecretIdentifier": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. KeyVault Secret URI for accessing the username."
                                            }
                                          },
                                          "passwordSecretIdentifier": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. KeyVault Secret URI for accessing the password."
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "registryName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the parent registry. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the credential set."
                                      }
                                    },
                                    "managedIdentities": {
                                      "$ref": "#/definitions/managedIdentitiesType",
                                      "metadata": {
                                        "description": "Required. The managed identity definition for this resource."
                                      }
                                    },
                                    "authCredentials": {
                                      "$ref": "#/definitions/authCredentialsType",
                                      "metadata": {
                                        "description": "Required. List of authentication credentials stored for an upstream. Usually consists of a primary and an optional secondary credential."
                                      }
                                    },
                                    "loginServer": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The credentials are stored for this upstream or login server."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), 'SystemAssigned', null())), null())]"
                                  },
                                  "resources": {
                                    "registry": {
                                      "existing": true,
                                      "type": "Microsoft.ContainerRegistry/registries",
                                      "apiVersion": "2023-06-01-preview",
                                      "name": "[parameters('registryName')]"
                                    },
                                    "credentialSet": {
                                      "type": "Microsoft.ContainerRegistry/registries/credentialSets",
                                      "apiVersion": "2023-11-01-preview",
                                      "name": "[format('{0}/{1}', parameters('registryName'), parameters('name'))]",
                                      "identity": "[variables('identity')]",
                                      "properties": {
                                        "authCredentials": "[parameters('authCredentials')]",
                                        "loginServer": "[parameters('loginServer')]"
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The Name of the Credential Set."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Credential Set."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the Credential Set."
                                      },
                                      "value": "[resourceId('Microsoft.ContainerRegistry/registries/credentialSets', parameters('registryName'), parameters('name'))]"
                                    },
                                    "systemAssignedMIPrincipalId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The principal ID of the system assigned identity."
                                      },
                                      "value": "[coalesce(tryGet(tryGet(reference('credentialSet', '2023-11-01-preview', 'full'), 'identity'), 'principalId'), '')]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "registry"
                              ]
                            },
                            "registry_cacheRules": {
                              "copy": {
                                "name": "registry_cacheRules",
                                "count": "[length(coalesce(parameters('cacheRules'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Registry-Cache-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "registryName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "sourceRepository": {
                                    "value": "[coalesce(parameters('cacheRules'), createArray())[copyIndex()].sourceRepository]"
                                  },
                                  "name": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('cacheRules'), createArray())[copyIndex()], 'name'), replace(replace(replace(coalesce(parameters('cacheRules'), createArray())[copyIndex()].sourceRepository, '/', '-'), '.', '-'), '*', ''))]"
                                  },
                                  "targetRepository": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('cacheRules'), createArray())[copyIndex()], 'targetRepository'), coalesce(parameters('cacheRules'), createArray())[copyIndex()].sourceRepository)]"
                                  },
                                  "credentialSetResourceId": "[if(not(empty(tryGet(coalesce(parameters('cacheRules'), createArray())[copyIndex()], 'credentialSetResourceId'))), createObject('value', tryGet(coalesce(parameters('cacheRules'), createArray())[copyIndex()], 'credentialSetResourceId')), createObject('value', null()))]"
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.33.13.18514",
                                      "templateHash": "6908196239628494570"
                                    },
                                    "name": "Container Registries Cache",
                                    "description": "Cache for Azure Container Registry (Preview) feature allows users to cache container images in a private container registry. Cache for ACR, is a preview feature available in Basic, Standard, and Premium service tiers ([ref](https://learn.microsoft.com/en-us/azure/container-registry/tutorial-registry-cache))."
                                  },
                                  "parameters": {
                                    "registryName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the parent registry. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "[replace(replace(replace(parameters('sourceRepository'), '/', '-'), '.', '-'), '*', '')]",
                                      "metadata": {
                                        "description": "Optional. The name of the cache rule. Will be derived from the source repository name if not defined."
                                      }
                                    },
                                    "sourceRepository": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Source repository pulled from upstream."
                                      }
                                    },
                                    "targetRepository": {
                                      "type": "string",
                                      "defaultValue": "[parameters('sourceRepository')]",
                                      "metadata": {
                                        "description": "Optional. Target repository specified in docker pull command. E.g.: docker pull myregistry.azurecr.io/{targetRepository}:{tag}."
                                      }
                                    },
                                    "credentialSetResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The resource ID of the credential store which is associated with the cache rule."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "registry": {
                                      "existing": true,
                                      "type": "Microsoft.ContainerRegistry/registries",
                                      "apiVersion": "2023-06-01-preview",
                                      "name": "[parameters('registryName')]"
                                    },
                                    "cacheRule": {
                                      "type": "Microsoft.ContainerRegistry/registries/cacheRules",
                                      "apiVersion": "2023-06-01-preview",
                                      "name": "[format('{0}/{1}', parameters('registryName'), parameters('name'))]",
                                      "properties": {
                                        "sourceRepository": "[parameters('sourceRepository')]",
                                        "targetRepository": "[parameters('targetRepository')]",
                                        "credentialSetResourceId": "[parameters('credentialSetResourceId')]"
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The Name of the Cache Rule."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Cache Rule."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the Cache Rule."
                                      },
                                      "value": "[resourceId('Microsoft.ContainerRegistry/registries/cacheRules', parameters('registryName'), parameters('name'))]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "registry",
                                "registry_credentialSets"
                              ]
                            },
                            "registry_webhooks": {
                              "copy": {
                                "name": "registry_webhooks",
                                "count": "[length(coalesce(parameters('webhooks'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Registry-Webhook-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(parameters('webhooks'), createArray())[copyIndex()].name]"
                                  },
                                  "registryName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "location": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('webhooks'), createArray())[copyIndex()], 'location'), parameters('location'))]"
                                  },
                                  "action": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('webhooks'), createArray())[copyIndex()], 'action'), createArray('chart_delete', 'chart_push', 'delete', 'push', 'quarantine'))]"
                                  },
                                  "customHeaders": {
                                    "value": "[tryGet(coalesce(parameters('webhooks'), createArray())[copyIndex()], 'customHeaders')]"
                                  },
                                  "scope": {
                                    "value": "[tryGet(coalesce(parameters('webhooks'), createArray())[copyIndex()], 'scope')]"
                                  },
                                  "status": {
                                    "value": "[tryGet(coalesce(parameters('webhooks'), createArray())[copyIndex()], 'status')]"
                                  },
                                  "serviceUri": {
                                    "value": "[coalesce(parameters('webhooks'), createArray())[copyIndex()].serviceUri]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('webhooks'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.33.13.18514",
                                      "templateHash": "9919896749023343359"
                                    },
                                    "name": "Azure Container Registry (ACR) Webhooks",
                                    "description": "This module deploys an Azure Container Registry (ACR) Webhook."
                                  },
                                  "parameters": {
                                    "registryName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent registry. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "[format('{0}webhook', parameters('registryName'))]",
                                      "minLength": 5,
                                      "maxLength": 50,
                                      "metadata": {
                                        "description": "Optional. The name of the registry webhook."
                                      }
                                    },
                                    "serviceUri": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The service URI for the webhook to post notifications."
                                      }
                                    },
                                    "status": {
                                      "type": "string",
                                      "defaultValue": "enabled",
                                      "allowedValues": [
                                        "disabled",
                                        "enabled"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The status of the webhook at the time the operation was called."
                                      }
                                    },
                                    "action": {
                                      "type": "array",
                                      "defaultValue": [
                                        "chart_delete",
                                        "chart_push",
                                        "delete",
                                        "push",
                                        "quarantine"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The list of actions that trigger the webhook to post notifications."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all resources."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "customHeaders": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Custom headers that will be added to the webhook notifications."
                                      }
                                    },
                                    "scope": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means all events."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "registry": {
                                      "existing": true,
                                      "type": "Microsoft.ContainerRegistry/registries",
                                      "apiVersion": "2023-06-01-preview",
                                      "name": "[parameters('registryName')]"
                                    },
                                    "webhook": {
                                      "type": "Microsoft.ContainerRegistry/registries/webhooks",
                                      "apiVersion": "2023-06-01-preview",
                                      "name": "[format('{0}/{1}', parameters('registryName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "actions": "[parameters('action')]",
                                        "customHeaders": "[parameters('customHeaders')]",
                                        "scope": "[parameters('scope')]",
                                        "serviceUri": "[parameters('serviceUri')]",
                                        "status": "[parameters('status')]"
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the webhook."
                                      },
                                      "value": "[resourceId('Microsoft.ContainerRegistry/registries/webhooks', parameters('registryName'), parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the webhook."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Azure container registry."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "actions": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "The actions of the webhook."
                                      },
                                      "value": "[reference('webhook').actions]"
                                    },
                                    "status": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The status of the webhook."
                                      },
                                      "value": "[reference('webhook').status]"
                                    },
                                    "provistioningState": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The provisioning state of the webhook."
                                      },
                                      "value": "[reference('webhook').provisioningState]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('webhook', '2023-06-01-preview', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "registry"
                              ]
                            },
                            "registry_privateEndpoints": {
                              "copy": {
                                "name": "registry_privateEndpoints",
                                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-registry-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "resourceGroup": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupName'), '')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'registry'), copyIndex()))]"
                                  },
                                  "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'registry'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'registry')))))), createObject('value', null()))]",
                                  "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'registry'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'registry')), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                                  "subnetResourceId": {
                                    "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                                  },
                                  "enableTelemetry": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                                  },
                                  "location": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                                  },
                                  "lock": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                                  },
                                  "privateDnsZoneGroup": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroup')]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                                  },
                                  "customDnsConfigs": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                                  },
                                  "ipConfigurations": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                                  },
                                  "applicationSecurityGroupResourceIds": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                                  },
                                  "customNetworkInterfaceName": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "1277254088602407590"
                                    },
                                    "name": "Private Endpoints",
                                    "description": "This module deploys a Private Endpoint.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "privateDnsZoneGroupType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the Private DNS Zone Group."
                                          }
                                        },
                                        "privateDnsZoneGroupConfigs": {
                                          "type": "array",
                                          "items": {
                                            "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                          },
                                          "metadata": {
                                            "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                                          }
                                        }
                                      }
                                    },
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                            }
                                          },
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "lockType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the name of lock."
                                          }
                                        },
                                        "kind": {
                                          "type": "string",
                                          "allowedValues": [
                                            "CanNotDelete",
                                            "None",
                                            "ReadOnly"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the type of lock."
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "ipConfigurationsType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The name of the resource that is unique within a resource group."
                                            }
                                          },
                                          "properties": {
                                            "type": "object",
                                            "properties": {
                                              "groupId": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                                }
                                              },
                                              "memberName": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                                }
                                              },
                                              "privateIPAddress": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                                }
                                              }
                                            },
                                            "metadata": {
                                              "description": "Required. Properties of private endpoint IP configurations."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "manualPrivateLinkServiceConnectionsType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The name of the private link service connection."
                                            }
                                          },
                                          "properties": {
                                            "type": "object",
                                            "properties": {
                                              "groupIds": {
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                },
                                                "metadata": {
                                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                                }
                                              },
                                              "privateLinkServiceId": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. The resource id of private link service."
                                                }
                                              },
                                              "requestMessage": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                                }
                                              }
                                            },
                                            "metadata": {
                                              "description": "Required. Properties of private link service connection."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "privateLinkServiceConnectionsType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The name of the private link service connection."
                                            }
                                          },
                                          "properties": {
                                            "type": "object",
                                            "properties": {
                                              "groupIds": {
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                },
                                                "metadata": {
                                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                                }
                                              },
                                              "privateLinkServiceId": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. The resource id of private link service."
                                                }
                                              },
                                              "requestMessage": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                                }
                                              }
                                            },
                                            "metadata": {
                                              "description": "Required. Properties of private link service connection."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "customDnsConfigType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "fqdn": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. Fqdn that resolves to private endpoint IP address."
                                            }
                                          },
                                          "ipAddresses": {
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "metadata": {
                                              "description": "Required. A list of private IP addresses of the private endpoint."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "privateDnsZoneGroupConfigType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the private DNS zone group config."
                                          }
                                        },
                                        "privateDnsZoneResourceId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The resource id of the private DNS zone."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "private-dns-zone-group/main.bicep"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the private endpoint resource to create."
                                      }
                                    },
                                    "subnetResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                                      }
                                    },
                                    "applicationSecurityGroupResourceIds": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                                      }
                                    },
                                    "customNetworkInterfaceName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The custom name of the network interface attached to the private endpoint."
                                      }
                                    },
                                    "ipConfigurations": {
                                      "$ref": "#/definitions/ipConfigurationsType",
                                      "metadata": {
                                        "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                                      }
                                    },
                                    "privateDnsZoneGroup": {
                                      "$ref": "#/definitions/privateDnsZoneGroupType",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The private DNS zone group to configure for the private endpoint."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all Resources."
                                      }
                                    },
                                    "lock": {
                                      "$ref": "#/definitions/lockType",
                                      "metadata": {
                                        "description": "Optional. The lock settings of the service."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                                      }
                                    },
                                    "customDnsConfigs": {
                                      "$ref": "#/definitions/customDnsConfigType",
                                      "metadata": {
                                        "description": "Optional. Custom DNS configurations."
                                      }
                                    },
                                    "manualPrivateLinkServiceConnections": {
                                      "$ref": "#/definitions/manualPrivateLinkServiceConnectionsType",
                                      "metadata": {
                                        "description": "Optional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource."
                                      }
                                    },
                                    "privateLinkServiceConnections": {
                                      "$ref": "#/definitions/privateLinkServiceConnectionsType",
                                      "metadata": {
                                        "description": "Optional. A grouping of information about the connection to the remote resource."
                                      }
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                                      "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                                      "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                                    }
                                  },
                                  "resources": {
                                    "avmTelemetry": {
                                      "condition": "[parameters('enableTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2024-03-01",
                                      "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.7.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": [],
                                          "outputs": {
                                            "telemetry": {
                                              "type": "String",
                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "privateEndpoint": {
                                      "type": "Microsoft.Network/privateEndpoints",
                                      "apiVersion": "2023-11-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "applicationSecurityGroups",
                                            "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                                            "input": {
                                              "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                                            }
                                          }
                                        ],
                                        "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                                        "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                                        "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                                        "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                                        "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                                        "subnet": {
                                          "id": "[parameters('subnetResourceId')]"
                                        }
                                      }
                                    },
                                    "privateEndpoint_lock": {
                                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                      "type": "Microsoft.Authorization/locks",
                                      "apiVersion": "2020-05-01",
                                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                      "properties": {
                                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    },
                                    "privateEndpoint_roleAssignments": {
                                      "copy": {
                                        "name": "privateEndpoint_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    },
                                    "privateEndpoint_privateDnsZoneGroup": {
                                      "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "name": {
                                            "value": "[tryGet(parameters('privateDnsZoneGroup'), 'name')]"
                                          },
                                          "privateEndpointName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "privateDnsZoneConfigs": {
                                            "value": "[parameters('privateDnsZoneGroup').privateDnsZoneGroupConfigs]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.29.47.4906",
                                              "templateHash": "5805178546717255803"
                                            },
                                            "name": "Private Endpoint Private DNS Zone Groups",
                                            "description": "This module deploys a Private Endpoint Private DNS Zone Group.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "definitions": {
                                            "privateDnsZoneGroupConfigType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The name of the private DNS zone group config."
                                                  }
                                                },
                                                "privateDnsZoneResourceId": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The resource id of the private DNS zone."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "__bicep_export!": true
                                              }
                                            }
                                          },
                                          "parameters": {
                                            "privateEndpointName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "privateDnsZoneConfigs": {
                                              "type": "array",
                                              "items": {
                                                "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                              },
                                              "minLength": 1,
                                              "maxLength": 5,
                                              "metadata": {
                                                "description": "Required. Array of private DNS zone configurations of the private DNS zone group. A DNS zone group can support up to 5 DNS zones."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "defaultValue": "default",
                                              "metadata": {
                                                "description": "Optional. The name of the private DNS zone group."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "copy": [
                                              {
                                                "name": "privateDnsZoneConfigsVar",
                                                "count": "[length(parameters('privateDnsZoneConfigs'))]",
                                                "input": {
                                                  "name": "[coalesce(tryGet(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')], 'name'), last(split(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId, '/')))]",
                                                  "properties": {
                                                    "privateDnsZoneId": "[parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId]"
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          "resources": {
                                            "privateEndpoint": {
                                              "existing": true,
                                              "type": "Microsoft.Network/privateEndpoints",
                                              "apiVersion": "2023-11-01",
                                              "name": "[parameters('privateEndpointName')]"
                                            },
                                            "privateDnsZoneGroup": {
                                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                              "apiVersion": "2023-11-01",
                                              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                              "properties": {
                                                "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigsVar')]"
                                              },
                                              "dependsOn": [
                                                "privateEndpoint"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the private endpoint DNS zone group."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the private endpoint DNS zone group."
                                              },
                                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group the private endpoint DNS zone group was deployed into."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the private endpoint was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('privateEndpoint', '2023-11-01', 'full').location]"
                                    },
                                    "customDnsConfig": {
                                      "$ref": "#/definitions/customDnsConfigType",
                                      "metadata": {
                                        "description": "The custom DNS configurations of the private endpoint."
                                      },
                                      "value": "[reference('privateEndpoint').customDnsConfigs]"
                                    },
                                    "networkInterfaceIds": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "The IDs of the network interfaces associated with the private endpoint."
                                      },
                                      "value": "[reference('privateEndpoint').networkInterfaces]"
                                    },
                                    "groupId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The group Id for the private endpoint Group."
                                      },
                                      "value": "[if(and(not(empty(reference('privateEndpoint').manualPrivateLinkServiceConnections)), greater(length(tryGet(reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties, 'groupIds')), 0)), coalesce(tryGet(reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties, 'groupIds', 0), ''), if(and(not(empty(reference('privateEndpoint').privateLinkServiceConnections)), greater(length(tryGet(reference('privateEndpoint').privateLinkServiceConnections[0].properties, 'groupIds')), 0)), coalesce(tryGet(reference('privateEndpoint').privateLinkServiceConnections[0].properties, 'groupIds', 0), ''), ''))]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "registry"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The Name of the Azure container registry."
                              },
                              "value": "[parameters('name')]"
                            },
                            "loginServer": {
                              "type": "string",
                              "metadata": {
                                "description": "The reference to the Azure container registry."
                              },
                              "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '2019-05-01').loginServer]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the Azure container registry."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the Azure container registry."
                              },
                              "value": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
                            },
                            "systemAssignedMIPrincipalId": {
                              "type": "string",
                              "metadata": {
                                "description": "The principal ID of the system assigned identity."
                              },
                              "value": "[coalesce(tryGet(tryGet(reference('registry', '2023-06-01-preview', 'full'), 'identity'), 'principalId'), '')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('registry', '2023-06-01-preview', 'full').location]"
                            },
                            "credentialSetsSystemAssignedMIPrincipalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "The Principal IDs of the ACR Credential Sets system-assigned identities."
                              },
                              "copy": {
                                "count": "[length(range(0, length(parameters('credentialSets'))))]",
                                "input": "[reference(format('registry_credentialSets[{0}]', range(0, length(parameters('credentialSets')))[copyIndex()])).outputs.systemAssignedMIPrincipalId.value]"
                              }
                            },
                            "credentialSetsResourceIds": {
                              "type": "array",
                              "metadata": {
                                "description": "The Resource IDs of the ACR Credential Sets."
                              },
                              "copy": {
                                "count": "[length(range(0, length(parameters('credentialSets'))))]",
                                "input": "[reference(format('registry_credentialSets[{0}]', range(0, length(parameters('credentialSets')))[copyIndex()])).outputs.resourceId.value]"
                              }
                            },
                            "privateEndpoints": {
                              "type": "array",
                              "metadata": {
                                "description": "The private endpoints of the Azure container registry."
                              },
                              "copy": {
                                "count": "[length(if(not(empty(parameters('privateEndpoints'))), array(parameters('privateEndpoints')), createArray()))]",
                                "input": {
                                  "name": "[reference(format('registry_privateEndpoints[{0}]', copyIndex())).outputs.name.value]",
                                  "resourceId": "[reference(format('registry_privateEndpoints[{0}]', copyIndex())).outputs.resourceId.value]",
                                  "groupId": "[reference(format('registry_privateEndpoints[{0}]', copyIndex())).outputs.groupId.value]",
                                  "customDnsConfig": "[reference(format('registry_privateEndpoints[{0}]', copyIndex())).outputs.customDnsConfig.value]",
                                  "networkInterfaceIds": "[reference(format('registry_privateEndpoints[{0}]', copyIndex())).outputs.networkInterfaceIds.value]"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "outputs": {
                    "loginServer": {
                      "type": "string",
                      "metadata": {
                        "description": "ACR login server"
                      },
                      "value": "[reference('containerRegistry').outputs.loginServer.value]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "ACR name"
                      },
                      "value": "[reference('containerRegistry').outputs.name.value]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "ACR resource ID"
                      },
                      "value": "[reference('containerRegistry').outputs.resourceId.value]"
                    },
                    "adminUsername": {
                      "type": "string",
                      "metadata": {
                        "description": "ACR admin username"
                      },
                      "value": "[listCredentials('acr', '2023-07-01').username]"
                    },
                    "adminPassword": {
                      "type": "string",
                      "metadata": {
                        "description": "ACR admin password"
                      },
                      "value": "[listCredentials('acr', '2023-07-01').passwords[0].value]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2025-04-01",
              "name": "[format('{0}-container-app-environment', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "containerAppEnvironmentName": {
                    "value": "[parameters('containerAppEnvironmentName')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-log-analytics', uniqueString(deployment().name, parameters('location')))), '2025-04-01').outputs.resourceId.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.38.5.1644",
                      "templateHash": "8001755337276152147"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure region for resources"
                      }
                    },
                    "containerAppEnvironmentName": {
                      "type": "string",
                      "metadata": {
                        "description": "Container app environment name"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "Tags to apply to resources"
                      }
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Log Analytics workspace resource ID"
                      }
                    },
                    "workloadProfiles": {
                      "type": "array",
                      "defaultValue": [
                        {
                          "name": "Consumption",
                          "workloadProfileType": "Consumption"
                        }
                      ],
                      "metadata": {
                        "description": "Workload profiles configuration"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2025-04-01",
                      "name": "[format('{0}-container-app-env', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('containerAppEnvironmentName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "workloadProfiles": {
                            "value": "[parameters('workloadProfiles')]"
                          },
                          "zoneRedundant": {
                            "value": false
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.32.4.45862",
                              "templateHash": "14164666077119957056"
                            },
                            "name": "App ManagedEnvironments",
                            "description": "This module deploys an App Managed Environment (also known as a Container App Environment)."
                          },
                          "definitions": {
                            "managedIdentitiesType": {
                              "type": "object",
                              "properties": {
                                "systemAssigned": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enables system assigned managed identity on the resource."
                                  }
                                },
                                "userAssignedResourceIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID(s) to assign to the resource."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                    }
                                  },
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "certificateKeyVaultPropertiesType": {
                              "type": "object",
                              "properties": {
                                "identityResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The resource ID of the identity. This is the identity that will be used to access the key vault."
                                  }
                                },
                                "keyVaultUrl": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. A key vault URL referencing the wildcard certificate that will be used for the custom domain."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "storageType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "accessMode": {
                                    "type": "string",
                                    "allowedValues": [
                                      "ReadOnly",
                                      "ReadWrite"
                                    ],
                                    "metadata": {
                                      "description": "Required. Access mode for storage: \"ReadOnly\" or \"ReadWrite\"."
                                    }
                                  },
                                  "kind": {
                                    "type": "string",
                                    "allowedValues": [
                                      "NFS",
                                      "SMB"
                                    ],
                                    "metadata": {
                                      "description": "Required. Type of storage: \"SMB\" or \"NFS\"."
                                    }
                                  },
                                  "storageAccountName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. Storage account name."
                                    }
                                  },
                                  "shareName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. File share name."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Container Apps Managed Environment."
                              }
                            },
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Existing Log Analytics Workspace resource ID. Note: This value is not required as per the resource type. However, not providing it currently causes an issue that is tracked [here](https://github.com/Azure/bicep/issues/9990)."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "managedIdentities": {
                              "$ref": "#/definitions/managedIdentitiesType",
                              "metadata": {
                                "description": "Optional. The managed identity definition for this resource."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "logsDestination": {
                              "type": "string",
                              "defaultValue": "log-analytics",
                              "metadata": {
                                "description": "Optional. Logs destination."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            },
                            "appInsightsConnectionString": {
                              "type": "securestring",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Application Insights connection string."
                              }
                            },
                            "daprAIConnectionString": {
                              "type": "securestring",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Application Insights connection string used by Dapr to export Service to Service communication telemetry."
                              }
                            },
                            "daprAIInstrumentationKey": {
                              "type": "securestring",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Azure Monitor instrumentation key used by Dapr to export Service to Service communication telemetry."
                              }
                            },
                            "dockerBridgeCidr": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Conditional. CIDR notation IP range assigned to the Docker bridge, network. It must not overlap with any other provided IP ranges and can only be used when the environment is deployed into a virtual network. If not provided, it will be set with a default value by the platform. Required if zoneRedundant is set to true to make the resource WAF compliant."
                              }
                            },
                            "infrastructureSubnetId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Conditional. Resource ID of a subnet for infrastructure components. This is used to deploy the environment into a virtual network. Must not overlap with any other provided IP ranges. Required if \"internal\" is set to true. Required if zoneRedundant is set to true to make the resource WAF compliant."
                              }
                            },
                            "internal": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Conditional. Boolean indicating the environment only has an internal load balancer. These environments do not have a public static IP resource. If set to true, then \"infrastructureSubnetId\" must be provided. Required if zoneRedundant is set to true to make the resource WAF compliant."
                              }
                            },
                            "platformReservedCidr": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Conditional. IP range in CIDR notation that can be reserved for environment infrastructure IP addresses. It must not overlap with any other provided IP ranges and can only be used when the environment is deployed into a virtual network. If not provided, it will be set with a default value by the platform. Required if zoneRedundant is set to true  to make the resource WAF compliant."
                              }
                            },
                            "platformReservedDnsIP": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Conditional. An IP address from the IP range defined by \"platformReservedCidr\" that will be reserved for the internal DNS server. It must not be the first address in the range and can only be used when the environment is deployed into a virtual network. If not provided, it will be set with a default value by the platform. Required if zoneRedundant is set to true to make the resource WAF compliant."
                              }
                            },
                            "peerTrafficEncryption": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Whether or not to encrypt peer traffic."
                              }
                            },
                            "zoneRedundant": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Whether or not this Managed Environment is zone-redundant."
                              }
                            },
                            "certificatePassword": {
                              "type": "securestring",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Password of the certificate used by the custom domain."
                              }
                            },
                            "certificateValue": {
                              "type": "securestring",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Certificate to use for the custom domain. PFX or PEM."
                              }
                            },
                            "certificateKeyVaultProperties": {
                              "$ref": "#/definitions/certificateKeyVaultPropertiesType",
                              "metadata": {
                                "description": "Optional. A key vault reference to the certificate to use for the custom domain."
                              }
                            },
                            "dnsSuffix": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. DNS suffix for the environment domain."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "openTelemetryConfiguration": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Open Telemetry configuration."
                              }
                            },
                            "workloadProfiles": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Conditional. Workload profiles configured for the Managed Environment. Required if zoneRedundant is set to true to make the resource WAF compliant."
                              }
                            },
                            "infrastructureResourceGroupName": {
                              "type": "string",
                              "defaultValue": "[take(format('ME_{0}', parameters('name')), 63)]",
                              "metadata": {
                                "description": "Conditional. Name of the infrastructure resource group. If not provided, it will be set with a default value. Required if zoneRedundant is set to true to make the resource WAF compliant."
                              }
                            },
                            "storages": {
                              "$ref": "#/definitions/storageType",
                              "metadata": {
                                "description": "Optional. The list of storages to mount on the environment."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "managedEnvironment::storage": {
                              "copy": {
                                "name": "storage",
                                "count": "[length(coalesce(parameters('storages'), createArray()))]"
                              },
                              "type": "Microsoft.App/managedEnvironments/storages",
                              "apiVersion": "2024-02-02-preview",
                              "name": "[format('{0}/{1}', parameters('name'), coalesce(parameters('storages'), createArray())[copyIndex()].shareName)]",
                              "properties": {
                                "nfsAzureFile": "[if(equals(coalesce(parameters('storages'), createArray())[copyIndex()].kind, 'NFS'), createObject('accessMode', coalesce(parameters('storages'), createArray())[copyIndex()].accessMode, 'server', format('{0}.file.{1}', coalesce(parameters('storages'), createArray())[copyIndex()].storageAccountName, environment().suffixes.storage), 'shareName', format('/{0}/{1}', coalesce(parameters('storages'), createArray())[copyIndex()].storageAccountName, coalesce(parameters('storages'), createArray())[copyIndex()].shareName)), null())]",
                                "azureFile": "[if(equals(coalesce(parameters('storages'), createArray())[copyIndex()].kind, 'SMB'), createObject('accessMode', coalesce(parameters('storages'), createArray())[copyIndex()].accessMode, 'accountName', coalesce(parameters('storages'), createArray())[copyIndex()].storageAccountName, 'accountKey', listkeys(resourceId('Microsoft.Storage/storageAccounts', coalesce(parameters('storages'), createArray())[copyIndex()].storageAccountName), '2023-01-01').keys[0].value, 'shareName', coalesce(parameters('storages'), createArray())[copyIndex()].shareName), null())]"
                              },
                              "dependsOn": [
                                "managedEnvironment"
                              ]
                            },
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.app-managedenvironment.{0}.{1}', replace('0.8.2', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "logAnalyticsWorkspace": {
                              "condition": "[not(empty(parameters('logAnalyticsWorkspaceResourceId')))]",
                              "existing": true,
                              "type": "Microsoft.OperationalInsights/workspaces",
                              "apiVersion": "2023-09-01",
                              "subscriptionId": "[split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2]]",
                              "resourceGroup": "[split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]]",
                              "name": "[last(split(parameters('logAnalyticsWorkspaceResourceId'), '/'))]"
                            },
                            "managedEnvironment": {
                              "type": "Microsoft.App/managedEnvironments",
                              "apiVersion": "2024-02-02-preview",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "identity": "[variables('identity')]",
                              "properties": {
                                "appInsightsConfiguration": {
                                  "connectionString": "[parameters('appInsightsConnectionString')]"
                                },
                                "appLogsConfiguration": {
                                  "destination": "[parameters('logsDestination')]",
                                  "logAnalyticsConfiguration": {
                                    "customerId": "[reference('logAnalyticsWorkspace').customerId]",
                                    "sharedKey": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(parameters('logAnalyticsWorkspaceResourceId'), '/'))), '2023-09-01').primarySharedKey]"
                                  }
                                },
                                "daprAIConnectionString": "[parameters('daprAIConnectionString')]",
                                "daprAIInstrumentationKey": "[parameters('daprAIInstrumentationKey')]",
                                "customDomainConfiguration": {
                                  "certificatePassword": "[parameters('certificatePassword')]",
                                  "certificateValue": "[if(not(empty(parameters('certificateValue'))), parameters('certificateValue'), null())]",
                                  "dnsSuffix": "[parameters('dnsSuffix')]",
                                  "certificateKeyVaultProperties": "[if(not(empty(parameters('certificateKeyVaultProperties'))), createObject('identity', parameters('certificateKeyVaultProperties').identityResourceId, 'keyVaultUrl', parameters('certificateKeyVaultProperties').keyVaultUrl), null())]"
                                },
                                "openTelemetryConfiguration": "[if(not(empty(parameters('openTelemetryConfiguration'))), parameters('openTelemetryConfiguration'), null())]",
                                "peerTrafficConfiguration": {
                                  "encryption": {
                                    "enabled": "[parameters('peerTrafficEncryption')]"
                                  }
                                },
                                "vnetConfiguration": {
                                  "internal": "[parameters('internal')]",
                                  "infrastructureSubnetId": "[if(not(empty(parameters('infrastructureSubnetId'))), parameters('infrastructureSubnetId'), null())]",
                                  "dockerBridgeCidr": "[if(not(empty(parameters('infrastructureSubnetId'))), parameters('dockerBridgeCidr'), null())]",
                                  "platformReservedCidr": "[if(and(empty(parameters('workloadProfiles')), not(empty(parameters('infrastructureSubnetId')))), parameters('platformReservedCidr'), null())]",
                                  "platformReservedDnsIP": "[if(and(empty(parameters('workloadProfiles')), not(empty(parameters('infrastructureSubnetId')))), parameters('platformReservedDnsIP'), null())]"
                                },
                                "workloadProfiles": "[if(not(empty(parameters('workloadProfiles'))), parameters('workloadProfiles'), null())]",
                                "zoneRedundant": "[parameters('zoneRedundant')]",
                                "infrastructureResourceGroup": "[parameters('infrastructureResourceGroupName')]"
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "managedEnvironment_roleAssignments": {
                              "copy": {
                                "name": "managedEnvironment_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.App/managedEnvironments/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.App/managedEnvironments', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "managedEnvironment"
                              ]
                            },
                            "managedEnvironment_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.App/managedEnvironments/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "managedEnvironment"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the Managed Environment was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('managedEnvironment', '2024-02-02-preview', 'full').location]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the Managed Environment."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the Managed Environment."
                              },
                              "value": "[resourceId('Microsoft.App/managedEnvironments', parameters('name'))]"
                            },
                            "systemAssignedMIPrincipalId": {
                              "type": "string",
                              "metadata": {
                                "description": "The principal ID of the system assigned identity."
                              },
                              "value": "[coalesce(tryGet(tryGet(reference('managedEnvironment', '2024-02-02-preview', 'full'), 'identity'), 'principalId'), '')]"
                            },
                            "defaultDomain": {
                              "type": "string",
                              "metadata": {
                                "description": "The Default domain of the Managed Environment."
                              },
                              "value": "[reference('managedEnvironment').defaultDomain]"
                            },
                            "staticIp": {
                              "type": "string",
                              "metadata": {
                                "description": "The IP address of the Managed Environment."
                              },
                              "value": "[reference('managedEnvironment').staticIp]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Container App Environment ID"
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-container-app-env', uniqueString(deployment().name, parameters('location')))), '2025-04-01').outputs.resourceId.value]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Container App Environment name"
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-container-app-env', uniqueString(deployment().name, parameters('location')))), '2025-04-01').outputs.name.value]"
                    },
                    "defaultDomain": {
                      "type": "string",
                      "metadata": {
                        "description": "Container App Environment default domain"
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-container-app-env', uniqueString(deployment().name, parameters('location')))), '2025-04-01').outputs.defaultDomain.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('{0}-log-analytics', uniqueString(deployment().name, parameters('location'))))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2025-04-01",
              "name": "[format('{0}-container-app', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "containerAppName": {
                    "value": "[parameters('containerAppName')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "environmentResourceId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-container-app-environment', uniqueString(deployment().name, parameters('location')))), '2025-04-01').outputs.resourceId.value]"
                  },
                  "acrLoginServer": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-container-registry', uniqueString(deployment().name, parameters('location')))), '2025-04-01').outputs.loginServer.value]"
                  },
                  "acrUsername": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-container-registry', uniqueString(deployment().name, parameters('location')))), '2025-04-01').outputs.adminUsername.value]"
                  },
                  "acrPassword": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-container-registry', uniqueString(deployment().name, parameters('location')))), '2025-04-01').outputs.adminPassword.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.38.5.1644",
                      "templateHash": "5630837393140571928"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure region for resources"
                      }
                    },
                    "containerAppName": {
                      "type": "string",
                      "metadata": {
                        "description": "Container app name"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "Tags to apply to resources"
                      }
                    },
                    "environmentResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Container App Environment resource ID"
                      }
                    },
                    "acrLoginServer": {
                      "type": "string",
                      "metadata": {
                        "description": "ACR login server"
                      }
                    },
                    "acrUsername": {
                      "type": "string",
                      "metadata": {
                        "description": "ACR admin username"
                      }
                    },
                    "acrPassword": {
                      "type": "securestring",
                      "metadata": {
                        "description": "ACR admin password"
                      }
                    },
                    "containerImage": {
                      "type": "string",
                      "defaultValue": "nginx:latest",
                      "metadata": {
                        "description": "Container image name"
                      }
                    },
                    "containerCpu": {
                      "type": "string",
                      "defaultValue": "0.25",
                      "metadata": {
                        "description": "Container CPU allocation"
                      }
                    },
                    "containerMemory": {
                      "type": "string",
                      "defaultValue": "0.5Gi",
                      "metadata": {
                        "description": "Container memory allocation"
                      }
                    },
                    "ingressTargetPort": {
                      "type": "int",
                      "defaultValue": 80,
                      "metadata": {
                        "description": "Target port for ingress"
                      }
                    },
                    "ingressExternal": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Enable external ingress"
                      }
                    },
                    "ingressTransport": {
                      "type": "string",
                      "defaultValue": "auto",
                      "metadata": {
                        "description": "Ingress transport"
                      }
                    },
                    "ingressAllowInsecure": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Allow insecure ingress"
                      }
                    },
                    "scaleMinReplicas": {
                      "type": "int",
                      "defaultValue": 1,
                      "metadata": {
                        "description": "Minimum replicas"
                      }
                    },
                    "scaleMaxReplicas": {
                      "type": "int",
                      "defaultValue": 3,
                      "metadata": {
                        "description": "Maximum replicas"
                      }
                    },
                    "scaleConcurrentRequests": {
                      "type": "string",
                      "defaultValue": "10",
                      "metadata": {
                        "description": "Concurrent requests for scaling"
                      }
                    },
                    "activeRevisionsMode": {
                      "type": "string",
                      "defaultValue": "Single",
                      "metadata": {
                        "description": "Revision mode"
                      }
                    },
                    "environmentVariables": {
                      "type": "array",
                      "defaultValue": [
                        {
                          "name": "DEBUG",
                          "value": "False"
                        }
                      ],
                      "metadata": {
                        "description": "Environment variables"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2025-04-01",
                      "name": "[format('{0}-container-app', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('containerAppName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "environmentResourceId": {
                            "value": "[parameters('environmentResourceId')]"
                          },
                          "containers": {
                            "value": [
                              {
                                "name": "[parameters('containerAppName')]",
                                "image": "[parameters('containerImage')]",
                                "resources": {
                                  "cpu": "[json(parameters('containerCpu'))]",
                                  "memory": "[parameters('containerMemory')]"
                                },
                                "env": "[parameters('environmentVariables')]"
                              }
                            ]
                          },
                          "ingressExternal": {
                            "value": "[parameters('ingressExternal')]"
                          },
                          "ingressTargetPort": {
                            "value": "[parameters('ingressTargetPort')]"
                          },
                          "ingressTransport": {
                            "value": "[parameters('ingressTransport')]"
                          },
                          "ingressAllowInsecure": {
                            "value": "[parameters('ingressAllowInsecure')]"
                          },
                          "registries": {
                            "value": [
                              {
                                "server": "[parameters('acrLoginServer')]",
                                "username": "[parameters('acrUsername')]",
                                "passwordSecretRef": "acr-password"
                              }
                            ]
                          },
                          "secrets": {
                            "value": {
                              "secureList": [
                                {
                                  "name": "acr-password",
                                  "value": "[parameters('acrPassword')]"
                                }
                              ]
                            }
                          },
                          "scaleMinReplicas": {
                            "value": "[parameters('scaleMinReplicas')]"
                          },
                          "scaleMaxReplicas": {
                            "value": "[parameters('scaleMaxReplicas')]"
                          },
                          "scaleRules": {
                            "value": [
                              {
                                "name": "http-rule",
                                "http": {
                                  "metadata": {
                                    "concurrentRequests": "[parameters('scaleConcurrentRequests')]"
                                  }
                                }
                              }
                            ]
                          },
                          "activeRevisionsMode": {
                            "value": "[parameters('activeRevisionsMode')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "1881400703735414059"
                            },
                            "name": "Container Apps",
                            "description": "This module deploys a Container App.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "managedIdentitiesType": {
                              "type": "object",
                              "properties": {
                                "systemAssigned": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enables system assigned managed identity on the resource."
                                  }
                                },
                                "userAssignedResourceIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID(s) to assign to the resource."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                    }
                                  },
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "container": {
                              "type": "object",
                              "properties": {
                                "args": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Container start command arguments."
                                  }
                                },
                                "command": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Container start command."
                                  }
                                },
                                "env": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/environmentVar"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Container environment variables."
                                  }
                                },
                                "image": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Container image tag."
                                  }
                                },
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Custom container name."
                                  }
                                },
                                "probes": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/containerAppProbe"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. List of probes for the container."
                                  }
                                },
                                "resources": {
                                  "type": "object",
                                  "metadata": {
                                    "description": "Required. Container resource requirements."
                                  }
                                },
                                "volumeMounts": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/volumeMount"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Container volume mounts."
                                  }
                                }
                              }
                            },
                            "ingressPortMapping": {
                              "type": "object",
                              "properties": {
                                "exposedPort": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies the exposed port for the target port. If not specified, it defaults to target port."
                                  }
                                },
                                "external": {
                                  "type": "bool",
                                  "metadata": {
                                    "description": "Required. Specifies whether the app port is accessible outside of the environment."
                                  }
                                },
                                "targetPort": {
                                  "type": "int",
                                  "metadata": {
                                    "description": "Required. Specifies the port the container listens on."
                                  }
                                }
                              }
                            },
                            "serviceBind": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the service."
                                  }
                                },
                                "serviceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The service ID."
                                  }
                                }
                              }
                            },
                            "environmentVar": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Environment variable name."
                                  }
                                },
                                "secretRef": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of the Container App secret from which to pull the environment variable value."
                                  }
                                },
                                "value": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Non-secret environment variable value."
                                  }
                                }
                              }
                            },
                            "containerAppProbe": {
                              "type": "object",
                              "properties": {
                                "failureThreshold": {
                                  "type": "int",
                                  "nullable": true,
                                  "minValue": 1,
                                  "maxValue": 10,
                                  "metadata": {
                                    "description": "Optional. Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3."
                                  }
                                },
                                "httpGet": {
                                  "$ref": "#/definitions/containerAppProbeHttpGet",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. HTTPGet specifies the http request to perform."
                                  }
                                },
                                "initialDelaySeconds": {
                                  "type": "int",
                                  "nullable": true,
                                  "minValue": 1,
                                  "maxValue": 60,
                                  "metadata": {
                                    "description": "Optional. Number of seconds after the container has started before liveness probes are initiated."
                                  }
                                },
                                "periodSeconds": {
                                  "type": "int",
                                  "nullable": true,
                                  "minValue": 1,
                                  "maxValue": 240,
                                  "metadata": {
                                    "description": "Optional. How often (in seconds) to perform the probe. Default to 10 seconds."
                                  }
                                },
                                "successThreshold": {
                                  "type": "int",
                                  "nullable": true,
                                  "minValue": 1,
                                  "maxValue": 10,
                                  "metadata": {
                                    "description": "Optional. Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup."
                                  }
                                },
                                "tcpSocket": {
                                  "$ref": "#/definitions/containerAppProbeTcpSocket",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported."
                                  }
                                },
                                "terminationGracePeriodSeconds": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is an alpha field and requires enabling ProbeTerminationGracePeriod feature gate. Maximum value is 3600 seconds (1 hour)."
                                  }
                                },
                                "timeoutSeconds": {
                                  "type": "int",
                                  "nullable": true,
                                  "minValue": 1,
                                  "maxValue": 240,
                                  "metadata": {
                                    "description": "Optional. Number of seconds after which the probe times out. Defaults to 1 second."
                                  }
                                },
                                "type": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Liveness",
                                    "Readiness",
                                    "Startup"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The type of probe."
                                  }
                                }
                              }
                            },
                            "corsPolicyType": {
                              "type": "object",
                              "properties": {
                                "allowCredentials": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Switch to determine whether the resource allows credentials."
                                  }
                                },
                                "allowedHeaders": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies the content for the access-control-allow-headers header."
                                  }
                                },
                                "allowedMethods": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies the content for the access-control-allow-methods header."
                                  }
                                },
                                "allowedOrigins": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies the content for the access-control-allow-origins header."
                                  }
                                },
                                "exposeHeaders": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies the content for the access-control-expose-headers header."
                                  }
                                },
                                "maxAge": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies the content for the access-control-max-age header."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "containerAppProbeHttpGet": {
                              "type": "object",
                              "properties": {
                                "host": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Host name to connect to. Defaults to the pod IP."
                                  }
                                },
                                "httpHeaders": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/containerAppProbeHttpGetHeadersItem"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. HTTP headers to set in the request."
                                  }
                                },
                                "path": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Path to access on the HTTP server."
                                  }
                                },
                                "port": {
                                  "type": "int",
                                  "metadata": {
                                    "description": "Required. Name or number of the port to access on the container."
                                  }
                                },
                                "scheme": {
                                  "type": "string",
                                  "allowedValues": [
                                    "HTTP",
                                    "HTTPS"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Scheme to use for connecting to the host. Defaults to HTTP."
                                  }
                                }
                              }
                            },
                            "containerAppProbeHttpGetHeadersItem": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of the header."
                                  }
                                },
                                "value": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Value of the header."
                                  }
                                }
                              }
                            },
                            "containerAppProbeTcpSocket": {
                              "type": "object",
                              "properties": {
                                "host": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Host name to connect to, defaults to the pod IP."
                                  }
                                },
                                "port": {
                                  "type": "int",
                                  "minValue": 1,
                                  "maxValue": 65535,
                                  "metadata": {
                                    "description": "Required. Number of the port to access on the container. Name must be an IANA_SVC_NAME."
                                  }
                                }
                              }
                            },
                            "volumeMount": {
                              "type": "object",
                              "properties": {
                                "mountPath": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Path within the container at which the volume should be mounted.Must not contain ':'."
                                  }
                                },
                                "subPath": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root)."
                                  }
                                },
                                "volumeName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. This must match the Name of a Volume."
                                  }
                                }
                              }
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Container App."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "disableIngress": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Bool to disable all ingress traffic for the container app."
                              }
                            },
                            "ingressExternal": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Bool indicating if the App exposes an external HTTP endpoint."
                              }
                            },
                            "clientCertificateMode": {
                              "type": "string",
                              "defaultValue": "ignore",
                              "allowedValues": [
                                "accept",
                                "ignore",
                                "require"
                              ],
                              "metadata": {
                                "description": "Optional. Client certificate mode for mTLS."
                              }
                            },
                            "corsPolicy": {
                              "$ref": "#/definitions/corsPolicyType",
                              "metadata": {
                                "description": "Optional. Object userd to configure CORS policy."
                              }
                            },
                            "stickySessionsAffinity": {
                              "type": "string",
                              "defaultValue": "none",
                              "allowedValues": [
                                "none",
                                "sticky"
                              ],
                              "metadata": {
                                "description": "Optional. Bool indicating if the Container App should enable session affinity."
                              }
                            },
                            "ingressTransport": {
                              "type": "string",
                              "defaultValue": "auto",
                              "allowedValues": [
                                "auto",
                                "http",
                                "http2",
                                "tcp"
                              ],
                              "metadata": {
                                "description": "Optional. Ingress transport protocol."
                              }
                            },
                            "service": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Dev ContainerApp service type."
                              }
                            },
                            "includeAddOns": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Toggle to include the service configuration."
                              }
                            },
                            "additionalPortMappings": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/ingressPortMapping"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Settings to expose additional ports on container app."
                              }
                            },
                            "ingressAllowInsecure": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Bool indicating if HTTP connections to is allowed. If set to false HTTP connections are automatically redirected to HTTPS connections."
                              }
                            },
                            "ingressTargetPort": {
                              "type": "int",
                              "defaultValue": 80,
                              "metadata": {
                                "description": "Optional. Target Port in containers for traffic from ingress."
                              }
                            },
                            "scaleMaxReplicas": {
                              "type": "int",
                              "defaultValue": 10,
                              "metadata": {
                                "description": "Optional. Maximum number of container replicas. Defaults to 10 if not set."
                              }
                            },
                            "scaleMinReplicas": {
                              "type": "int",
                              "defaultValue": 3,
                              "metadata": {
                                "description": "Optional. Minimum number of container replicas. Defaults to 3 if not set."
                              }
                            },
                            "scaleRules": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Scaling rules."
                              }
                            },
                            "serviceBinds": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/serviceBind"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. List of container app services bound to the app."
                              }
                            },
                            "activeRevisionsMode": {
                              "type": "string",
                              "defaultValue": "Single",
                              "allowedValues": [
                                "Multiple",
                                "Single"
                              ],
                              "metadata": {
                                "description": "Optional. Controls how active revisions are handled for the Container app."
                              }
                            },
                            "environmentResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of environment."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "registries": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Collection of private container registry credentials for containers used by the Container app."
                              }
                            },
                            "managedIdentities": {
                              "$ref": "#/definitions/managedIdentitiesType",
                              "metadata": {
                                "description": "Optional. The managed identity definition for this resource."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            },
                            "customDomains": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Custom domain bindings for Container App hostnames."
                              }
                            },
                            "exposedPort": {
                              "type": "int",
                              "defaultValue": 0,
                              "metadata": {
                                "description": "Optional. Exposed Port in containers for TCP traffic from ingress."
                              }
                            },
                            "ipSecurityRestrictions": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Rules to restrict incoming IP address."
                              }
                            },
                            "trafficLabel": {
                              "type": "string",
                              "defaultValue": "label-1",
                              "metadata": {
                                "description": "Optional. Associates a traffic label with a revision. Label name should be consist of lower case alphanumeric characters or dashes."
                              }
                            },
                            "trafficLatestRevision": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Indicates that the traffic weight belongs to a latest stable revision."
                              }
                            },
                            "trafficRevisionName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of a revision."
                              }
                            },
                            "trafficWeight": {
                              "type": "int",
                              "defaultValue": 100,
                              "metadata": {
                                "description": "Optional. Traffic weight assigned to a revision."
                              }
                            },
                            "dapr": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Dapr configuration for the Container App."
                              }
                            },
                            "maxInactiveRevisions": {
                              "type": "int",
                              "defaultValue": 0,
                              "metadata": {
                                "description": "Optional. Max inactive revisions a Container App can have."
                              }
                            },
                            "containers": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/container"
                              },
                              "metadata": {
                                "description": "Required. List of container definitions for the Container App."
                              }
                            },
                            "initContainersTemplate": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. List of specialized containers that run before app containers."
                              }
                            },
                            "secrets": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The secrets of the Container App."
                              }
                            },
                            "revisionSuffix": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. User friendly suffix that is appended to the revision name."
                              }
                            },
                            "volumes": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. List of volume definitions for the Container App."
                              }
                            },
                            "workloadProfileName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Workload profile name to pin for container app execution."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "secretList": "[if(not(empty(parameters('secrets'))), parameters('secrets').secureList, createArray())]",
                            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                            "builtInRoleNames": {
                              "ContainerApp Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ad2dd5fb-cd4b-4fd4-a9b6-4fed3630980b')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.app-containerapp.{0}.{1}', replace('0.11.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "containerApp": {
                              "type": "Microsoft.App/containerApps",
                              "apiVersion": "2024-03-01",
                              "name": "[parameters('name')]",
                              "tags": "[parameters('tags')]",
                              "location": "[parameters('location')]",
                              "identity": "[variables('identity')]",
                              "properties": {
                                "environmentId": "[parameters('environmentResourceId')]",
                                "configuration": {
                                  "activeRevisionsMode": "[parameters('activeRevisionsMode')]",
                                  "dapr": "[if(not(empty(parameters('dapr'))), parameters('dapr'), null())]",
                                  "ingress": "[if(parameters('disableIngress'), null(), createObject('additionalPortMappings', parameters('additionalPortMappings'), 'allowInsecure', if(not(equals(parameters('ingressTransport'), 'tcp')), parameters('ingressAllowInsecure'), false()), 'customDomains', if(not(empty(parameters('customDomains'))), parameters('customDomains'), null()), 'corsPolicy', if(and(not(equals(parameters('corsPolicy'), null())), not(equals(parameters('ingressTransport'), 'tcp'))), createObject('allowCredentials', coalesce(tryGet(parameters('corsPolicy'), 'allowCredentials'), false()), 'allowedHeaders', coalesce(tryGet(parameters('corsPolicy'), 'allowedHeaders'), createArray()), 'allowedMethods', coalesce(tryGet(parameters('corsPolicy'), 'allowedMethods'), createArray()), 'allowedOrigins', coalesce(tryGet(parameters('corsPolicy'), 'allowedOrigins'), createArray()), 'exposeHeaders', coalesce(tryGet(parameters('corsPolicy'), 'exposeHeaders'), createArray()), 'maxAge', tryGet(parameters('corsPolicy'), 'maxAge')), null()), 'clientCertificateMode', if(not(equals(parameters('ingressTransport'), 'tcp')), parameters('clientCertificateMode'), null()), 'exposedPort', parameters('exposedPort'), 'external', parameters('ingressExternal'), 'ipSecurityRestrictions', if(not(empty(parameters('ipSecurityRestrictions'))), parameters('ipSecurityRestrictions'), null()), 'targetPort', parameters('ingressTargetPort'), 'stickySessions', createObject('affinity', parameters('stickySessionsAffinity')), 'traffic', if(not(equals(parameters('ingressTransport'), 'tcp')), createArray(createObject('label', parameters('trafficLabel'), 'latestRevision', parameters('trafficLatestRevision'), 'revisionName', parameters('trafficRevisionName'), 'weight', parameters('trafficWeight'))), null()), 'transport', parameters('ingressTransport')))]",
                                  "service": "[if(and(parameters('includeAddOns'), not(empty(parameters('service')))), parameters('service'), null())]",
                                  "maxInactiveRevisions": "[parameters('maxInactiveRevisions')]",
                                  "registries": "[if(not(empty(parameters('registries'))), parameters('registries'), null())]",
                                  "secrets": "[variables('secretList')]"
                                },
                                "template": {
                                  "containers": "[parameters('containers')]",
                                  "initContainers": "[if(not(empty(parameters('initContainersTemplate'))), parameters('initContainersTemplate'), null())]",
                                  "revisionSuffix": "[parameters('revisionSuffix')]",
                                  "scale": {
                                    "maxReplicas": "[parameters('scaleMaxReplicas')]",
                                    "minReplicas": "[parameters('scaleMinReplicas')]",
                                    "rules": "[if(not(empty(parameters('scaleRules'))), parameters('scaleRules'), null())]"
                                  },
                                  "serviceBinds": "[if(and(parameters('includeAddOns'), not(empty(parameters('serviceBinds')))), parameters('serviceBinds'), null())]",
                                  "volumes": "[if(not(empty(parameters('volumes'))), parameters('volumes'), null())]"
                                },
                                "workloadProfileName": "[parameters('workloadProfileName')]"
                              }
                            },
                            "containerApp_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.App/containerApps/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "containerApp"
                              ]
                            },
                            "containerApp_roleAssignments": {
                              "copy": {
                                "name": "containerApp_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.App/containerApps/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.App/containerApps', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "containerApp"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the Container App."
                              },
                              "value": "[resourceId('Microsoft.App/containerApps', parameters('name'))]"
                            },
                            "fqdn": {
                              "type": "string",
                              "metadata": {
                                "description": "The configuration of ingress fqdn."
                              },
                              "value": "[if(parameters('disableIngress'), 'IngressDisabled', reference('containerApp').configuration.ingress.fqdn)]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the Container App was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the Container App."
                              },
                              "value": "[parameters('name')]"
                            },
                            "systemAssignedMIPrincipalId": {
                              "type": "string",
                              "metadata": {
                                "description": "The principal ID of the system assigned identity."
                              },
                              "value": "[coalesce(tryGet(tryGet(reference('containerApp', '2024-03-01', 'full'), 'identity'), 'principalId'), '')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('containerApp', '2024-03-01', 'full').location]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "fqdn": {
                      "type": "string",
                      "metadata": {
                        "description": "Container app FQDN"
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-container-app', uniqueString(deployment().name, parameters('location')))), '2025-04-01').outputs.fqdn.value]"
                    },
                    "url": {
                      "type": "string",
                      "metadata": {
                        "description": "Container app URL"
                      },
                      "value": "[format('https://{0}', reference(resourceId('Microsoft.Resources/deployments', format('{0}-container-app', uniqueString(deployment().name, parameters('location')))), '2025-04-01').outputs.fqdn.value)]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Container app name"
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-container-app', uniqueString(deployment().name, parameters('location')))), '2025-04-01').outputs.name.value]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Container app resource ID"
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-container-app', uniqueString(deployment().name, parameters('location')))), '2025-04-01').outputs.resourceId.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('{0}-container-app-environment', uniqueString(deployment().name, parameters('location'))))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}-container-registry', uniqueString(deployment().name, parameters('location'))))]"
              ]
            }
          ],
          "outputs": {
            "acrLoginServer": {
              "type": "string",
              "metadata": {
                "description": "ACR login server"
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-container-registry', uniqueString(deployment().name, parameters('location')))), '2025-04-01').outputs.loginServer.value]"
            },
            "acrName": {
              "type": "string",
              "metadata": {
                "description": "ACR name"
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-container-registry', uniqueString(deployment().name, parameters('location')))), '2025-04-01').outputs.name.value]"
            },
            "containerAppFqdn": {
              "type": "string",
              "metadata": {
                "description": "Container app FQDN"
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-container-app', uniqueString(deployment().name, parameters('location')))), '2025-04-01').outputs.fqdn.value]"
            },
            "containerAppUrl": {
              "type": "string",
              "metadata": {
                "description": "Container app URL"
              },
              "value": "[format('https://{0}', reference(resourceId('Microsoft.Resources/deployments', format('{0}-container-app', uniqueString(deployment().name, parameters('location')))), '2025-04-01').outputs.fqdn.value)]"
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace ID"
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-log-analytics', uniqueString(deployment().name, parameters('location')))), '2025-04-01').outputs.resourceId.value]"
            },
            "containerAppEnvironmentId": {
              "type": "string",
              "metadata": {
                "description": "Container App Environment ID"
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-container-app-environment', uniqueString(deployment().name, parameters('location')))), '2025-04-01').outputs.resourceId.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-resource-group', uniqueString(deployment().name, parameters('location'))))]"
      ]
    }
  ],
  "outputs": {
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Resource group name"
      },
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-resource-group', uniqueString(deployment().name, parameters('location')))), '2025-04-01').outputs.name.value]"
    },
    "acrLoginServer": {
      "type": "string",
      "metadata": {
        "description": "ACR login server"
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-{1}', parameters('resourceGroupName'), parameters('suffix'))), 'Microsoft.Resources/deployments', format('{0}-resources', uniqueString(deployment().name, parameters('location')))), '2025-04-01').outputs.acrLoginServer.value]"
    },
    "acrName": {
      "type": "string",
      "metadata": {
        "description": "ACR name"
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-{1}', parameters('resourceGroupName'), parameters('suffix'))), 'Microsoft.Resources/deployments', format('{0}-resources', uniqueString(deployment().name, parameters('location')))), '2025-04-01').outputs.acrName.value]"
    },
    "containerAppFqdn": {
      "type": "string",
      "metadata": {
        "description": "Container app FQDN"
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-{1}', parameters('resourceGroupName'), parameters('suffix'))), 'Microsoft.Resources/deployments', format('{0}-resources', uniqueString(deployment().name, parameters('location')))), '2025-04-01').outputs.containerAppFqdn.value]"
    },
    "containerAppUrl": {
      "type": "string",
      "metadata": {
        "description": "Container app URL"
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-{1}', parameters('resourceGroupName'), parameters('suffix'))), 'Microsoft.Resources/deployments', format('{0}-resources', uniqueString(deployment().name, parameters('location')))), '2025-04-01').outputs.containerAppUrl.value]"
    },
    "logAnalyticsWorkspaceId": {
      "type": "string",
      "metadata": {
        "description": "Log Analytics workspace ID"
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-{1}', parameters('resourceGroupName'), parameters('suffix'))), 'Microsoft.Resources/deployments', format('{0}-resources', uniqueString(deployment().name, parameters('location')))), '2025-04-01').outputs.logAnalyticsWorkspaceId.value]"
    },
    "containerAppEnvironmentId": {
      "type": "string",
      "metadata": {
        "description": "Container App Environment ID"
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-{1}', parameters('resourceGroupName'), parameters('suffix'))), 'Microsoft.Resources/deployments', format('{0}-resources', uniqueString(deployment().name, parameters('location')))), '2025-04-01').outputs.containerAppEnvironmentId.value]"
    }
  }
}